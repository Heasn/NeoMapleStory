using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using NeoMapleStory.Core;
using NeoMapleStory.Core.IO;
using NeoMapleStory.Game.Buff;
using NeoMapleStory.Game.Client;
using NeoMapleStory.Game.Inventory;
using NeoMapleStory.Game.Life;
using NeoMapleStory.Game.Map;
using NeoMapleStory.Game.Mob;
using NeoMapleStory.Game.Movement;
using NeoMapleStory.Game.Shop;
using NeoMapleStory.Server;
using NeoMapleStory.Settings;

namespace NeoMapleStory.Packet
{
    public static class PacketCreator
    {
        private static readonly byte[] CharInfoMagic = { 0xFF, 0xC9, 0x9A, 0x3B };
        public static readonly List<Tuple<MapleStat, int>> EmptyStatupdate = new List<Tuple<MapleStat, int>>();
        private static readonly long FinalTime = 3439785600000L;

        public static byte[] Handshake(byte[] sendIv, byte[] recvIv)
        {
            using (var p = new OutPacket())
            {
                p.WriteShort(0x0D);
                p.WriteShort(ServerSettings.MapleVersion);
                p.WriteZero(2);
                p.WriteBytes(recvIv);
                p.WriteBytes(sendIv);
                p.WriteByte(ServerSettings.MapleLocale);
                return p.ToArray();
            }
        }

        public static OutPacket Ping()
        {
            using (var p = new OutPacket(SendOpcodes.Ping))
            {
                return p;
            }
        }

        public static void AddInventoryInfo(OutPacket p, MapleCharacter chr)
        {
            p.WriteByte(0x01);
            p.WriteMapleString(chr.Name);
            p.WriteInt(chr.Meso.Value); //冒险币
            p.WriteInt(chr.Id);
            p.WriteLong(0); //豆豆
            p.WriteByte(chr.Inventorys[MapleInventoryType.Equip.Value].SlotLimit); // equip slots
            p.WriteByte(chr.Inventorys[MapleInventoryType.Use.Value].SlotLimit); // use slots
            p.WriteByte(chr.Inventorys[MapleInventoryType.Setup.Value].SlotLimit); // set-up slots
            p.WriteByte(chr.Inventorys[MapleInventoryType.Etc.Value].SlotLimit); // etc slots
            p.WriteByte(chr.Inventorys[MapleInventoryType.Cash.Value].SlotLimit); // cash slots
            p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));

            var iv = chr.Inventorys[MapleInventoryType.Equipped.Value];
            var equippedC = iv.Inventory.Values;
            var equipped = new List<IMapleItem>(equippedC.Count);
            lock (iv)
            {
                equipped.AddRange(equippedC.Where(item => item.Position > 156));
            }

            equipped.Sort();

            foreach (var item in equipped)
            {
                AddItemInfo(p, item);
            }

            p.WriteByte(0x00); // start of equiped cash inventory

            equipped.Clear();

            lock (iv)
            {
                equipped.AddRange(equippedC.Where(item => item.Position < 156));
            }
            equipped.Sort();

            foreach (var item in equipped)
            {
                AddItemInfo(p, item);
            }

            p.WriteByte(0x00); // start of equip inventory
            iv = chr.Inventorys[MapleInventoryType.Equip.Value];
            lock (iv)
            {
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item);
                }
            }

            p.WriteByte(0x00); // start of use inventory                       
            iv = chr.Inventorys[MapleInventoryType.Use.Value];
            lock (iv)
            {
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item);
                }
            }

            p.WriteByte(0x00); // start of set-up inventory
            iv = chr.Inventorys[MapleInventoryType.Setup.Value];
            lock (iv)
            {
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item);
                }
            }

            p.WriteByte(0x00); // start of etc inventory
            iv = chr.Inventorys[MapleInventoryType.Etc.Value];
            lock (iv)
            {
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item);
                }
            }

            p.WriteByte(0x00); // start of cash inventory
            iv = chr.Inventorys[MapleInventoryType.Cash.Value];
            lock (iv)
            {
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item);
                }
            }
        }

        public static void AddSkillRecord(OutPacket p, MapleCharacter chr)
        {
            p.WriteByte(0x00); // start of skills
            p.WriteShort((short)chr.Skills.Count);

            foreach (var skill in chr.Skills)
            {
                p.WriteInt(skill.Key.SkillId);
                p.WriteInt(skill.Value.SkilLevel);
                if (skill.Key.IsFourthJob)
                {
                    p.WriteInt(skill.Value.MasterLevel);
                }
            }
            p.WriteShort((short)chr.GetAllCooldowns().Count);
            foreach (var cooling in chr.GetAllCooldowns())
            {
                p.WriteInt(cooling.SkillId);
                var timeLeft = (int)(cooling.Duration + cooling.StartTime - DateTime.Now.GetTimeMilliseconds());
                p.WriteShort((short)(timeLeft / 1000));
            }
        }

        public static void AddQuestRecord(OutPacket p, MapleCharacter chr)
        {
            var started = chr.GetStartedQuests();
            p.WriteShort((short)started.Count);
            foreach (var questStatus in started)
            {
                p.WriteShort((short)questStatus.Quest.GetQuestId());
                var killStr = new StringBuilder();
                foreach (var kills in questStatus.GetMobKills().Values)
                {
                    killStr.Append(kills.ToString().PadLeft(3, '0'));
                }
                p.WriteMapleString(killStr.ToString());
            }
            var completed = chr.GetCompletedQuests();
            p.WriteShort((short)completed.Count);
            foreach (var questStatus in completed)
            {
                p.WriteShort((short)questStatus.Quest.GetQuestId());
                p.WriteLong(DateUtiliy.GetFileTimestamp(questStatus.CompletionTime));
            }
        }

        public static void AddRingInfo(OutPacket p, MapleCharacter chr)
        {
            var iv = chr.Inventorys[MapleInventoryType.Equipped.Value];
            var equipped = new List<Item>(iv.Inventory.Values.Count);
            foreach (var item in iv.Inventory.Values)
            {
                equipped.Add((Item)item);
            }
            equipped.Sort();

            var rings = new List<IEquip>();
            foreach (var item in equipped)
            {
                if (item.ItemId >= 1112800 && item.ItemId <= 1112802 || item.ItemId >= 1112001 && item.ItemId <= 1112003)
                {
                    rings.Add(MapleRing.LoadFromDb(item.ItemId, item.Position, item.UniqueId));
                }
            }

            iv = chr.Inventorys[MapleInventoryType.Equip.Value];
            foreach (var item in iv.Inventory.Values)
            {
                if (item.ItemId >= 1112800 && item.ItemId <= 1112802 || item.ItemId >= 1112001 && item.ItemId <= 1112003)
                {
                    rings.Add(MapleRing.LoadFromDb(item.ItemId, item.Position, item.UniqueId));
                }
            }
            rings.Sort();

            var frLast = false;
            foreach (var ring in rings)
            {
                if ((ring.ItemId >= 1112800 && ring.ItemId <= 1112802 ||
                     ring.ItemId >= 1112001 && ring.ItemId <= 1112003 || ring.ItemId <= 1112804) &&
                    rings.IndexOf(ring) == 0)
                {
                    p.WriteShort(0);
                }
                p.WriteShort(0);
                p.WriteShort(1);
                p.WriteInt(ring.PartnerId);
                p.WriteString(ring.PartnerName.PadRight(13, '\0'));
                p.WriteInt(ring.UniqueId);
                p.WriteInt(0);
                p.WriteInt(ring.PartnerUniqueId);
                if (ring.ItemId >= 1112800 && ring.ItemId <= 1112802 || ring.ItemId >= 1112001 && ring.ItemId <= 1112003 ||
                    ring.ItemId <= 1112804)
                {
                    //1112804 结婚戒指
                    frLast = true;
                    p.WriteInt(0);
                    p.WriteInt(ring.ItemId);
                    p.WriteShort(0);
                }
                else
                {
                    if (rings.Count > 1)
                    {
                        p.WriteShort(0);
                    }
                    frLast = false;
                }
            }
            if (!frLast)
            {
                p.WriteShort(0); // addMiniGameRecordInfo(mplew, chr); //short amount, int int int int int
                p.WriteShort(0); // addCoupleRecordInfo(mplew, chr); //short amount, foreach amount, encode (0x21 bytes)
                p.WriteShort(0); // addFriendRecordInfo(mplew, chr); //short amount, foreach amount, encode (0x25 bytes)
                p.WriteShort(0);
                // addMariageRecordInfo(mplew, chr); //short amount, foreach amount, encode (0x30 bytes)
            }
        }

        public static void AddTeleportRockRecord(OutPacket mplew, MapleCharacter chr)
        {
            var maps = chr.GetTRockMaps(0);
            foreach (var map in maps)
            {
                mplew.WriteInt(map);
            }
            for (var i = maps.Count; i < 5; i++)
            {
                mplew.WriteBytes(CharInfoMagic);
            }

            maps = chr.GetTRockMaps(1);
            foreach (var map in maps)
            {
                mplew.WriteInt(map);
            }
            for (var i = maps.Count; i < 10; i++)
            {
                mplew.WriteBytes(CharInfoMagic);
            }
        }

        public static OutPacket SendAutoHpPot(int itemId)
        {
            using (var p = new OutPacket(SendOpcodes.AutoHpPot))
            {
                p.WriteInt(itemId);
                return p;
            }
        }

        public static OutPacket SendAutoMpPot(int itemId)
        {
            using (var p = new OutPacket(SendOpcodes.AutoMpPot))
            {
                p.WriteInt(itemId);
                return p;
            }
        }

        public static OutPacket ShowCharCash(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.CharCash))
            {
                p.WriteInt(chr.Id);
                p.WriteInt(chr.MaplePoint);
                return p;
            }
        }

        public static OutPacket WeirdStatUpdate()
        {
            using (var p = new OutPacket(SendOpcodes.UpdateStats))
            {
                p.WriteByte(0x00);
                p.WriteByte(0x38);
                p.WriteShort(0);
                p.WriteLong(0);
                p.WriteLong(0);
                p.WriteLong(0);
                p.WriteByte(0x00);
                p.WriteByte(0x01);
                return p;
            }
        }

        public static OutPacket DamagePlayer(byte skill, int monsteridfrom, int cid, int damage, int fake,
            byte direction, bool pgmr, byte pgmr1, bool isPg, int oid, short posX, short posY)
        {
            // 82 00 30 C0 23 00 FF 00 00 00 00 B4 34 03 00 01 00 00 00 00 00 00
            using (var p = new OutPacket(SendOpcodes.DamagePlayer))
            {
                // mplew.writeShort(0x84); // 47 82
                p.WriteInt(cid);
                p.WriteByte(skill);
                p.WriteInt(damage);
                p.WriteInt(monsteridfrom);
                p.WriteByte(direction);
                if (pgmr)
                {
                    p.WriteByte(pgmr1);
                    p.WriteBool(isPg);
                    p.WriteInt(oid);
                    p.WriteByte(6);
                    p.WriteShort(posX);
                    p.WriteShort(posY);
                    p.WriteByte(0);
                }
                else
                {
                    p.WriteShort(0);
                }
                p.WriteInt(damage);
                if (fake > 0)
                {
                    p.WriteInt(fake);
                }
                return p;
            }
        }

        public static OutPacket MusicChange(string song)
        {
            return EnvironmentChange(song, 6);
        }

        public static OutPacket ShowEffect(string effect)
        {
            return EnvironmentChange(effect, 3);
        }

        public static OutPacket PlaySound(string sound)
        {
            return EnvironmentChange(sound, 4);
        }

        public static OutPacket EnvironmentChange(string env, byte mode)
        {
            using (var p = new OutPacket(SendOpcodes.BossEnv))
            {
                p.WriteByte(mode);
                p.WriteMapleString(env);
                return p;
            }
        }

        public static OutPacket SkillCooldown(int sid, int time)
        {
            using (var p = new OutPacket(SendOpcodes.Cooldown))
            {
                p.WriteInt(sid);
                p.WriteShort((short)time);
                return p;
            }
        }

        public static OutPacket StartMapEffect(string msg, int itemid, bool active)
        {
            using (var p = new OutPacket(SendOpcodes.MapEffect))
            {
                p.WriteBool(!active);
                p.WriteInt(itemid);
                if (active)
                {
                    p.WriteMapleString(msg);
                }
                return p;
            }
        }

        public static OutPacket RemoveMapEffect()
        {
            using (var p = new OutPacket(SendOpcodes.MapEffect))
            {
                p.WriteByte(0x00);
                p.WriteInt(0);
                return p;
            }
        }

        public static OutPacket ShowLevelup(int cid)
        {
            return ShowForeignEffect(cid, 0);
        }

        public static OutPacket ShowJobChange(int cid)
        {
            return ShowForeignEffect(cid, 9);
        }

        public static OutPacket ShowForeignEffect(int cid, int effect)
        {
            using (var p = new OutPacket(SendOpcodes.ShowForeignEffect))
            {
                p.WriteInt(cid); // charid
                p.WriteByte((byte)effect); // 0 = Level up, 8 = ?, 9 = job change, 10 = Quest Complete
                return p;
            }
        }

        public static OutPacket GetShowMesoGain(int gain, bool inChat = false)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                if (!inChat)
                {
                    p.WriteByte(0x00);
                    p.WriteByte(0x01);
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteByte(0x05);
                }
                p.WriteInt(gain);
                p.WriteShort(0); // inet cafe meso gain ?.o

                return p;
            }
        }

        public static OutPacket GetShowExpGain(int gain, bool inChat, bool white, int k = 0)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(0x03); // 3 = exp, 4 = fame, 5 = mesos, 6 = guildpoints
                p.WriteBool(white);
                p.WriteInt(gain);
                p.WriteByte(0);
                p.WriteBool(inChat);
                p.WriteInt(0);
                p.WriteInt(0);
                p.WriteInt(0);
                p.WriteInt(0);
                p.WriteInt(k);
                p.WriteByte(0x00); //网吧
                p.WriteByte(0x00); //网吧
                return p;
            }
        }

        public static OutPacket GetShowFameGain(int gain)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(4);
                p.WriteInt(gain);
                return p;
            }
        }

        public static OutPacket GetShowItemGain(int itemId, short quantity, bool inChat = false)
        {
            using (var mplew = new OutPacket(inChat ? SendOpcodes.ShowItemGainInchat : SendOpcodes.ShowStatusInfo))
            {
                if (inChat)
                {
                    mplew.WriteByte(3);
                    mplew.WriteByte(1);
                    mplew.WriteInt(itemId);
                    mplew.WriteInt(quantity);
                }
                else
                {
                    mplew.WriteShort(0);
                    mplew.WriteInt(itemId);
                    mplew.WriteInt(quantity);
                    mplew.WriteInt(0);
                    mplew.WriteInt(0);
                }
                return mplew;
            }
        }

        public static OutPacket UpdateSkill(int skillid, int level, int masterlevel)
        {
            // 1E 00 01 01 00 E9 03 00 00 01 00 00 00 00 00 00 00 01
            using (var p = new OutPacket(SendOpcodes.UpdateSkills))
            {
                p.WriteByte(0x01);
                p.WriteShort(1);
                p.WriteInt(skillid);
                p.WriteInt(level);
                p.WriteInt(masterlevel);
                p.WriteByte(0x01);
                return p;
            }
        }

        public static OutPacket UpdateBuddylist(List<MapleBuddyListEntry> buddylist)
        {
            using (var p = new OutPacket(SendOpcodes.Buddylist))
            {
                p.WriteByte(7);
                p.WriteByte((byte)buddylist.Count);
                foreach (var buddy in buddylist)
                {
                    if (buddy.Visible)
                    {
                        p.WriteInt(buddy.CharacterId); // cid
                        p.WriteString(buddy.CharacterName.PadRight(13, '\0'));
                        p.WriteByte(0x00);
                        p.WriteInt(buddy.ChannelId);
                        p.WriteString(buddy.Group.PadRight(17, '\0'));
                    }
                }
                if (buddylist.Count > 0)
                    p.WriteZero(buddylist.Count);

                return p;
            }
        }

        public static OutPacket LoadFamily()
        {
            string[] title =
            {
                "直接移动到学院成员身边", "直接召唤学院成员", "我的爆率 1.5倍(15分钟)", "我的经验值 1.5倍(15分钟)", "学院成员的团结(30分钟)",
                "我的爆率 2倍(15分钟)", "我的经验值 2倍(15分钟)", "我的爆率 2倍(30分钟)", "我的经验值 2倍(30分钟)", "我的组队爆率 2倍(30分钟)",
                "我的组队经验值 2倍(30分钟)"
            };
            string[] description =
            {
                "[对象] 我\n[效果] 直接可以移动到指定的学院成员身边。", "[对象] 学院成员 1名\n[效果] 直接可以召唤指定的学院成员到现在的地图。",
                "[对象] 我\n[持续效果] 15分钟\n[效果] 打怪爆率增加到 #c1.5倍# \n※ 与爆率活动重叠时失效。",
                "[对象] 我\n[持续效果] 15分钟\n[效果] 打怪经验值增加到 #c1.5倍# \n※ 与经验值活动重叠时失效。",
                "[启动条件] 校谱最低层学院成员6名以上在线时\n[持续效果] 30分钟\n[效果] 爆率和经验值增加到 #c2倍# ※ 与爆率、经验值活动重叠时失效。",
                "[对象] 我\n[持续效果] 15分钟\n[效果] 打怪爆率增加到 #c2倍# \n※ 与爆率活动重叠时失效。",
                "[对象] 我\n[持续效果] 15分钟\n[效果] 打怪经验值增加到 #c2倍# \n※ 与经验值活动重叠时失效。",
                "[对象] 我\n[持续效果] 30分钟\n[效果] 打怪爆率增加到 #c2倍# \n※ 与爆率活动重叠时失效。",
                "[对象] 我\n[持续效果] 30分钟\n[效果] 打怪经验值增加到 #c2倍# \n※ 与经验值活动重叠时失效。",
                "[对象] 我所属组队\n[持续效果] 30分钟\n[效果] 打怪爆率增加到 #c2倍# \n※ 与爆率活动重叠时失效。",
                "[对象] 我所属组队\n[持续效果] 30分钟\n[效果] 打怪经验值增加到 #c2倍# \n※ 与经验值活动重叠时失效。"
            };
            int[] repCost = { 3, 5, 7, 8, 10, 12, 15, 20, 25, 40, 50 };

            using (var p = new OutPacket(SendOpcodes.LoadFamily))
            {
                p.WriteInt(11);
                for (var i = 0; i < 11; i++)
                {
                    p.WriteByte((byte)(i > 4 ? i % 2 + 1 : i));
                    p.WriteInt(repCost[i] * 100);
                    p.WriteInt(1);
                    p.WriteMapleString(title[i]);
                    p.WriteMapleString(description[i]);
                }
                return p;
            }
        }

        public static OutPacket GetMacros(SkillMacro[] macros)
        {
            using (var p = new OutPacket(SendOpcodes.SkillMacro))
            {
                var count = 0;
                for (var i = 0; i < 5; i++)
                {
                    if (macros[i] != null)
                    {
                        count++;
                    }
                }
                p.WriteByte((byte)count); // number of macros
                for (var i = 0; i < 5; i++)
                {
                    var macro = macros[i];
                    if (macro != null)
                    {
                        p.WriteMapleString(macro.MacroName);
                        p.WriteByte((byte)macro.Shout);
                        p.WriteInt(macro.SkillId1);
                        p.WriteInt(macro.SkillId2);
                        p.WriteInt(macro.SkillId2);
                    }
                }
                return p;
            }
        }

        public static OutPacket ShowNotes(int count)
        {
            using (var p = new OutPacket(SendOpcodes.ShowNotes))
            {
                p.WriteByte(0x03);
                p.WriteByte((byte)count);
                //for (int i = 0; i < count; i++)
                //{
                //    p.WriteInt(notes.getInt("id"));
                //    p.WriteMapleAsciiString(notes.getString("from"));
                //    p.WriteMapleAsciiString(notes.getString("message"));
                //    p.WriteLong(DateUtil.getFileTimestamp(notes.getLong("timestamp")));
                //    p.WriteByteInt(1);
                //    notes.next();
                //}

                return p;
            }
        }

        public static OutPacket CloseRangeAttack(int cid, int skill, byte stance, byte numAttackedAndDamage,
            List<Tuple<int, List<int>>> damage, byte speed, byte pos)
        {
            using (var p = new OutPacket(SendOpcodes.CloseRangeAttack))
            {
                if (skill == 4211006)
                {
                    AddMesoExplosion(p, cid, skill, stance, numAttackedAndDamage, 0, damage, speed, pos);
                }
                else
                {
                    AddAttackBody(p, cid, skill, stance, numAttackedAndDamage, 0, damage, speed, pos);
                }
                return p;
            }
        }

        public static OutPacket MagicAttack(int cid, int skill, byte stance, byte numAttackedAndDamage,
            List<Tuple<int, List<int>>> damage, int charge, byte speed, byte pos)
        {
            using (var p = new OutPacket(SendOpcodes.MagicAttack))
            {
                AddAttackBody(p, cid, skill, stance, numAttackedAndDamage, 0, damage, speed, pos);
                if (charge != -1)
                {
                    p.WriteInt(charge);
                }

                return p;
            }
        }

        private static void AddAttackBody(OutPacket lew, int cid, int skill, byte stance, byte numAttackedAndDamage,
            int projectile, List<Tuple<int, List<int>>> damage, byte speed, byte pos)
        {
            lew.WriteInt(cid);
            lew.WriteByte(numAttackedAndDamage);
            lew.WriteByte(0);
            if (skill > 0)
            {
                lew.WriteByte(0xFF); // too low and some skills don't work (?)
                lew.WriteInt(skill);
            }
            else
            {
                lew.WriteByte(0);
            }
            lew.WriteByte(0);
            lew.WriteByte(pos);
            lew.WriteByte(stance);
            lew.WriteByte(speed);
            lew.WriteByte(0);
            lew.WriteInt(projectile);

            foreach (var oned in damage)
            {
                if (oned.Item2 != null)
                {
                    lew.WriteInt(oned.Item1);
                    lew.WriteByte(0xFF);
                    foreach (var eachd in oned.Item2)
                    {
                        lew.WriteInt((int)(skill == 3221007 ? eachd + 0x80000000 : eachd));
                    }
                }
            }
        }

        private static void AddMesoExplosion(OutPacket lew, int cid, int skill, byte stance, byte numAttackedAndDamage,
            int projectile, List<Tuple<int, List<int>>> damage, byte speed, byte pos)
        {
            // BC 00 90 E5 2F 00 00 5A 1A 3E 41 40 00 00 3F 00 03 0A 00 00 00 00 //078
            lew.WriteInt(cid);
            lew.WriteByte(numAttackedAndDamage);
            lew.WriteByte(0x5A);
            lew.WriteByte(0x1A);
            lew.WriteInt(skill);
            lew.WriteByte(0);
            lew.WriteByte(pos);
            lew.WriteByte(stance);
            lew.WriteByte(speed);
            lew.WriteByte(0x0A);
            lew.WriteInt(projectile);

            foreach (var oned in damage)
            {
                if (oned.Item2 != null)
                {
                    lew.WriteInt(oned.Item1);
                    lew.WriteByte(0xFF);
                    lew.WriteByte((byte)oned.Item2.Count);
                    foreach (var eachd in oned.Item2)
                    {
                        lew.WriteInt(eachd);
                    }
                }
            }
        }

        public static OutPacket RemoveItemFromMap(int oid, byte animation, int cid)
        {
            return RemoveItemFromMap(oid, animation, cid, false, 0);
        }

        public static OutPacket RemoveItemFromMap(int oid, byte animation, int cid, bool pet, byte slot)
        {
            using (var p = new OutPacket(SendOpcodes.RemoveItemFromMap))
            {
                p.WriteByte(animation); // expire
                p.WriteInt(oid);
                if (animation >= 2)
                {
                    p.WriteInt(cid);
                    if (pet)
                    {
                        p.WriteByte(slot);
                    }
                }
                return p;
            }
        }

        public static OutPacket DropMesoFromMapObject(int amount, int itemoid, int dropperoid, int ownerid,
            Point dropfrom, Point dropto, byte mod)
        {
            return DropItemFromMapObjectInternal(amount, itemoid, dropperoid, ownerid, dropfrom, dropto, mod, true);
        }

        public static OutPacket DropItemFromMapObject(int itemid, int itemoid, int dropperoid, int ownerid,
            Point dropfrom, Point dropto, byte mod)
        {
            return DropItemFromMapObjectInternal(itemid, itemoid, dropperoid, ownerid, dropfrom, dropto, mod, false);
        }

        public static OutPacket DropItemFromMapObjectInternal(int itemid, int itemoid, int dropperoid, int ownerid,
            Point dropfrom, Point dropto, byte mod, bool mesos)
        {
            using (var p = new OutPacket(SendOpcodes.DropItemFromMapobject))
            {
                p.WriteByte(mod);
                p.WriteInt(itemoid);
                p.WriteBool(mesos); // 1 = mesos, 0 =item
                p.WriteInt(itemid);
                p.WriteInt(0); // owner charid
                p.WriteByte(0x04);
                p.WriteShort((short)dropto.X);
                p.WriteShort((short)dropto.Y);
                if (mod != 2)
                {
                    p.WriteInt(0);
                    p.WriteShort((short)dropfrom.X);
                    p.WriteShort((short)dropfrom.Y);
                }
                else
                {
                    p.WriteInt(dropperoid);
                }
                p.WriteByte(0);
                if (mod != 2)
                {
                    p.WriteByte(0); //fuck knows
                    p.WriteByte(1); //PET Meso pickup
                }
                if (!mesos)
                {
                    p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                }

                return p;
            }
        }

        public static OutPacket CancelForeignBuff(int cid, List<MapleBuffStat> statups)
        {
            using (var mplew = new OutPacket(SendOpcodes.CancelForeignBuff))
            {
                mplew.WriteInt(cid);
                var mask = GetLongMaskFromList(statups);
                var mask2 = 42949673024L;
                if (mask == (long)MapleBuffStat.MonsterRiding || mask == (long)MapleBuffStat.Dash || mask == mask2)
                {
                    mplew.WriteByte(0x00);
                }
                else
                {
                    mplew.WriteLong(0);
                }
                mplew.WriteLong(mask);
                if (mask == (long)MapleBuffStat.MonsterRiding || mask == (long)MapleBuffStat.Dash || mask == mask2)
                {
                    mplew.WriteInt(0);
                    mplew.WriteShort(0);
                    mplew.WriteByte(0x00);
                }
                return mplew;
            }
        }

        public static OutPacket CancelBuff(List<MapleBuffStat> statups)
        {
            using (var p = new OutPacket(SendOpcodes.CancelBuff))
            {
                var mask = GetLongMaskFromList(statups);
                var mask2 = 42949673024L;
                if (mask == (long)MapleBuffStat.MonsterRiding || mask == (long)MapleBuffStat.Dash || mask == mask2)
                {
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteLong(0);
                }
                p.WriteLong(mask);
                if (mask == (long)MapleBuffStat.MonsterRiding || mask == (long)MapleBuffStat.Dash || mask == mask2)
                {
                    p.WriteInt(0);
                    p.WriteShort(0);
                    p.WriteByte(0x00);
                }
                p.WriteByte((byte)(mask == (long)MapleBuffStat.Dash ? 4 : 3));
                return p;
            }
        }

        private static long GetLongMask<T>(List<Tuple<T, int>> statups) where T : struct
        {
            long mask = 0;
            foreach (var statup in statups)
            {
                mask |= Convert.ToInt64(statup.Item1);
            }
            return mask;
        }

        private static long GetLongMaskFromList<T>(List<T> statups) where T : struct
        {
            long mask = 0;
            foreach (var statup in statups)
            {
                mask |= Convert.ToInt64(statup);
            }
            return mask;
        }

        #region 好友

        public static OutPacket RequestBuddylistAdd(int cidFrom, string nameFrom)
        {
            using (var p = new OutPacket(SendOpcodes.Buddylist))
            {
                p.WriteByte(0x09);
                p.WriteInt(cidFrom);
                p.WriteMapleString(nameFrom);
                p.WriteInt(cidFrom);
                p.WriteString(nameFrom.PadRight(13, '\0'));
                p.WriteByte(0x01);
                p.WriteByte(0x05);
                p.WriteByte(0x00);
                p.WriteShort(0);
                p.WriteString("群未定".PadRight(17, '\0'));
                p.WriteInt(0);

                return p;
            }
        }

        #endregion

        public static OutPacket UpdateMount(int charid, MapleMount mount, bool levelup)
        {
            return UpdateMount(charid, mount.Level, mount.Exp, mount.Tiredness, levelup);
        }

        public static OutPacket UpdateMount(int charid, int newlevel, int newexp, int tiredness, bool levelup)
        {
            using (var p = new OutPacket(SendOpcodes.UpdateMount))
            {
                p.WriteInt(charid);
                p.WriteInt(newlevel);
                p.WriteInt(newexp);
                p.WriteInt(tiredness);
                p.WriteBool(levelup);
                return p;
            }
        }


        public static OutPacket ShowPet(MapleCharacter chr, MaplePet pet, bool remove, bool hunger = false)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnPet))
            {
                p.WriteInt(chr.Id);
                p.WriteByte((byte)chr.GetPetSlot(pet));
                if (remove)
                {
                    p.WriteByte(0x00);
                    p.WriteBool(hunger);
                }
                else
                {
                    p.WriteByte(0x01);
                    p.WriteByte(0x00);
                    p.WriteInt(pet.ItemId);
                    p.WriteMapleString(pet.PetInfo.Name);
                    p.WriteInt(pet.UniqueId);
                    p.WriteInt(0);
                    p.WriteShort((short)pet.Pos.X);
                    p.WriteShort((short)pet.Pos.Y);
                    p.WriteByte((byte)pet.Stance);
                    p.WriteInt(pet.Fh);
                }

                return p;
            }
        }


        public static OutPacket UseChalkboard(MapleCharacter chr, bool close)
        {
            using (var p = new OutPacket(SendOpcodes.Chalkboard))
            {
                p.WriteInt(chr.Id);
                if (close)
                {
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteByte(0x01);
                    p.WriteMapleString(chr.ChalkBoardText);
                }
                return p;
            }
        }

        public static OutPacket GiveForeignEnergyCharge(int cid, short barammount)
        {
            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(cid);
                p.WriteLong(0);
                p.WriteLong((long)MapleBuffStat.EnergyCharge);
                p.WriteShort(0);
                p.WriteShort(barammount);
                p.WriteShort(0);
                p.WriteLong(0);
                p.WriteShort(0);
                p.WriteShort(0);
                return p;
            }
        }

        public static OutPacket UpdatePartyMemberHp(int cid, int curhp, int maxhp)
        {
            using (var p = new OutPacket(SendOpcodes.UpdatePartymemberHp))
            {
                p.WriteInt(cid);
                p.WriteInt(curhp);
                p.WriteInt(maxhp);
                return p;
            }
        }

        public static OutPacket GiveDebuff(long mask, List<Tuple<MapleDisease, int>> statups, MobSkill skill)
        {
            // [1D 00] [00 00 00 00 00 00 00 00] [00 00 02 00 00 00 00 00] [00 00] [7B 00] [04 00] [B8 0B 00 00] [00 00] [84 03] [01]
            using (var p = new OutPacket(SendOpcodes.GiveBuff))
            {
                p.WriteLong(0);
                p.WriteLong(mask);
                foreach (var statup in statups)
                {
                    p.WriteShort((short)statup.Item1);
                    p.WriteShort(skill.SkillId);
                    p.WriteShort(skill.SkillLevel);
                    p.WriteInt(skill.Duration);
                }
                p.WriteShort(0); // ??? wk charges have 600 here o.o
                p.WriteShort(900); //Delay
                p.WriteByte(0x02);

                return p;
            }
        }

        public static OutPacket GiveForeignDebuff(int cid, long mask, MobSkill skill)
        {
            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(cid);
                p.WriteLong(0);
                p.WriteLong(mask);
                p.WriteShort(skill.SkillId);
                p.WriteShort(skill.SkillLevel);
                p.WriteShort(0);
                p.WriteShort(0x84);
                p.WriteByte(0x03);
                return p;
            }
        }

        public static OutPacket ShowOwnBuffEffect(int skillid, byte effectid)
        {
            using (var p = new OutPacket(SendOpcodes.ShowItemGainInchat))
            {
                p.WriteByte(effectid);
                p.WriteInt(skillid);
                p.WriteByte(0x01); //Ver0.78?
                p.WriteByte(0x01); // probably buff level but we don't know it and it doesn't really matter
                return p;
            }
        }

        public static OutPacket ShowBuffeffect(int cid, int skillid, byte effectid)
        {
            return ShowBuffeffect(cid, skillid, effectid, 3, false);
        }

        public static OutPacket ShowBuffeffect(int cid, int skillid, byte effectid, byte direction)
        {
            using (var p = new OutPacket(SendOpcodes.ShowForeignEffect))
            {
                p.WriteInt(cid); // ?
                p.WriteByte(effectid);
                p.WriteInt(skillid);
                p.WriteByte(0x02);
                p.WriteByte(0x01);
                if (direction != 3)
                {
                    p.WriteByte(direction);
                }

                return p;
            }
        }

        public static OutPacket ShowBuffeffect(int cid, int skillid, byte effectid, byte direction, bool morph)
        {
            using (var p = new OutPacket(SendOpcodes.ShowForeignEffect))
            {
                p.WriteInt(cid);
                if (morph)
                {
                    p.WriteByte(0x01);
                    p.WriteInt(skillid);
                    p.WriteByte(direction);
                }
                p.WriteByte(effectid);
                p.WriteInt(skillid);
                p.WriteByte(0x01);
                if (direction != 3)
                {
                    p.WriteByte(direction);
                }
                return p;
            }
        }

        public static OutPacket GiveGmHide(bool hidden)
        {
            using (var p = new OutPacket(SendOpcodes.Gm))
            {
                p.WriteByte(0x10);
                p.WriteBool(hidden);
                return p;
            }
        }

        public static OutPacket ShowMagnet(int mobid, byte success)
        {
            // Monster Magnet
            using (var p = new OutPacket(SendOpcodes.ShowMagnet))
            {
                p.WriteInt(mobid);
                p.WriteByte(success);

                return p;
            }
        }

        public static OutPacket GetEnergy(int level)
        {
            using (var p = new OutPacket(SendOpcodes.Energy))
            {
                p.WriteMapleString("energy");
                p.WriteMapleString(level.ToString());

                return p;
            }
        }

        public static OutPacket ShowMonsterRiding(int cid, List<Tuple<MapleBuffStat, int>> statups, int itemId, int skillId)
        {
            //C9 00 1D CE 4A 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 B0 05 1D 00 EC 03 00 00 00 00 00 00 00 00 00
            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(cid);
                p.WriteByte(0);
                long mask = GetLongMask(statups);
                p.WriteLong(mask);
                p.WriteLong(0);
                p.WriteByte(0);
                p.WriteInt(itemId);
                p.WriteInt(skillId);
                p.WriteInt(0);
                p.WriteShort(0);
                p.WriteByte(0);

                return p;
            }
        }

        public static OutPacket GiveDash(List<Tuple<MapleBuffStat, int>> statups, int duration)
        {
            using (var p = new OutPacket(SendOpcodes.GiveBuff))
            {
                p.WriteByte(0);
                p.WriteLong((int)MapleBuffStat.Dash);
                p.WriteLong(0);
                p.WriteByte(0);
                foreach (var stat in statups)
                {
                    p.WriteInt(stat.Item2);
                    p.WriteInt(5001005);
                    p.WriteInt(0);
                    p.WriteShort((short)duration);
                    p.WriteByte(0);
                }
                p.WriteByte(0);
                p.WriteShort(0);
                p.WriteByte(2);

                return p;
            }
        }

        public static OutPacket GiveBuff(MapleCharacter c, int buffid, int bufflength, List<Tuple<MapleBuffStat, int>> statups)
        {
            using (var p = new OutPacket(SendOpcodes.GiveBuff))
            {
                if (bufflength % 20000000 == 1004 || bufflength == 5221006)
                {
                    long mask = GetLongMask(statups);
                    p.WriteByte(0);
                    p.WriteLong(mask);
                    p.WriteLong(0);
                    foreach (var statup in statups)
                    {
                        if (statup.Item2 >= 1000 && statup.Item2 != 1002)
                        {
                            p.WriteShort((short)(statup.Item2 + (c.Gender ? 0 : 1) * 100));
                        }
                        else
                        {
                            p.WriteByte(0);
                        }
                        p.WriteInt(buffid);
                        p.WriteInt(bufflength);
                    }
                    p.WriteInt(0);
                    p.WriteShort(0);
                    p.WriteByte(0);
                    p.WriteByte(2);
                }
                else
                {
                    long mask = GetLongMask(statups);
                    p.WriteLong(0);
                    p.WriteLong(mask);
                    foreach (var statup in statups)
                    {
                        if (statup.Item2 >= 1000 && statup.Item2 != 1002)
                        {
                            p.WriteShort((short)(statup.Item2 + (c.Gender ? 0 : 1) * 100));
                        }
                        else
                        {
                            p.WriteShort((short)statup.Item2);
                        }
                        p.WriteInt(buffid);
                        p.WriteInt(bufflength);
                    }
                    if (bufflength % 20000000 == 1004 || bufflength == 5221006)
                    {
                        p.WriteInt(0);
                    }
                    else
                    {
                        p.WriteShort(0); // ??? wk charges have 600 here o.o
                    }
                    p.WriteByte(0); // combo 600, too
                    p.WriteByte(0); // new in v0.56
                    p.WriteByte(0);
                }
                return p;
            }
        }

        public static OutPacket GiveInfusion(short bufflength, short speed)
        {
            using (var p = new OutPacket(SendOpcodes.GiveBuff))
            {
                p.WriteLong(0);
                p.WriteLong((int)MapleBuffStat.Morph);
                p.WriteShort(speed);
                p.WriteInt(5121009);
                p.WriteLong(0);
                p.WriteShort(bufflength);
                p.WriteShort(0);

                return p;
            }
        }

        public static OutPacket GiveForeignBuff(MapleCharacter c, List<Tuple<MapleBuffStat, int>> statups, MapleStatEffect effect)
        {

            // [C5 00] [12 01 2B 00] [00 00 00 00 00 00 00 00] [00 00 00 00 80 00 00 00] [0A 00] [00 00] [00] //077
            // [C5 00] [1F 01 2B 00] [00 00 00 00 00 00 00 00] [00 00 00 00 80 00 00 00] [0A 00] [00 00] [00]
            // [C9 00] [1D CE 4A 00] [00 00 00 00 00 00 00 00] [02 00 00 00 80 00 00 00] [28 E8] [03 00] [00 00] [00]
            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(c.Id);
                long mask = GetLongMask(statups);
                p.WriteLong(0);
                p.WriteLong(mask);
                foreach (var statup in statups)
                {
                    if (effect.isMorph() && statup.Item2 <= 255)
                    {
                        p.WriteByte((byte)statup.Item2);
                    }
                    else
                    {
                        if (effect.IsPirateMorph())
                        {
                            p.WriteShort((short)(statup.Item2 + (c.Gender ? 0 : 1) * 100));
                        }
                        else
                        {
                            p.WriteShort((short)statup.Item2);
                        }
                    }
                }
                p.WriteShort(0); // same as give_buff
                if (effect.isMorph() && !effect.IsPirateMorph())
                {
                    p.WriteShort(0);
                }
                p.WriteByte(0);
                p.WriteByte(0);//?

                return p;
            }
        }

        public static OutPacket ShowDashEffecttoOthers(int cid, List<Tuple<MapleBuffStat, int>> statups, short duration)
        {
            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(cid);
                p.WriteLong(0);
                p.WriteLong((int)MapleBuffStat.Dash);
                p.WriteShort(0);
                foreach (var stat in statups)
                {
                    p.WriteInt(stat.Item2);
                    p.WriteInt(5001005);
                    p.WriteBytes(new byte[] { 0x1A, 0x7C, 0x8D, 0x35 });
                    p.WriteShort(duration);
                }
                p.WriteShort(0);

                return p;
            }
        }

        public static OutPacket GiveForeignInfusion(int cid, int speed, int duration)
        {

            using (var p = new OutPacket(SendOpcodes.GiveForeignBuff))
            {
                p.WriteInt(cid);
                p.WriteLong(0);
                p.WriteLong((int)MapleBuffStat.Morph);
                p.WriteShort(0);
                p.WriteInt(speed);
                p.WriteInt(5121009);
                p.WriteLong(0);
                p.WriteInt(duration);
                p.WriteShort(0);

                return p;
            }
        }

        public static OutPacket WarpToCashShop(MapleClient c)
        {
            return WarpToCashShop(c, false);
        }

        public static OutPacket warpMTS(MapleClient c)
        {
            return WarpToCashShop(c, true);
        }

        public static OutPacket WarpToCashShop(MapleClient c, bool isMTS)
        {

            MapleCharacter chr = c.Player;
            using (var p = new OutPacket(isMTS ? SendOpcodes.MtsOpen : SendOpcodes.CsOpen))
            {
                p.WriteLong(-1);
                p.WriteByte(0);
                LoginPacket.AddCharStats(p, chr);
                p.WriteByte(20); // ???
                p.WriteByte(0);
                p.WriteInt(chr.Meso.Value); // mesos
                p.WriteInt(chr.Id);
                p.WriteInt(0);
                p.WriteInt(0);
                p.WriteByte(chr.Inventorys[MapleInventoryType.Equip.Value].SlotLimit); // equip slots
                p.WriteByte(chr.Inventorys[MapleInventoryType.Use.Value].SlotLimit); // use slots
                p.WriteByte(chr.Inventorys[MapleInventoryType.Setup.Value].SlotLimit); // set-up slots
                p.WriteByte(chr.Inventorys[MapleInventoryType.Etc.Value].SlotLimit); // etc slots
                p.WriteByte(chr.Inventorys[MapleInventoryType.Cash.Value].SlotLimit); // cash slots
                p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                MapleInventory iv = chr.Inventorys[MapleInventoryType.Equipped.Value];
                var equippedC = iv.Inventory.Values;
                List<Item> equipped = new List<Item>(equippedC.Count);
                foreach (var item in equippedC)
                {
                    if (((Item)item).Position >156)
                    {
                        equipped.Add((Item)item);
                    }
                }
                equipped.Sort();

                foreach (var item in equipped)
                {
                    AddItemInfo(p, item);
                }
                p.WriteByte(0); // start of equiped cash inventory
                equipped.Clear();
                foreach (var item in equippedC)
                {
                    if (((Item)item).Position <156)
                    {
                        equipped.Add((Item)item);
                    }
                }
                equipped.Sort();

                foreach (var item in equipped)
                {
                    AddItemInfo(p, item);
                }

                p.WriteByte(0);
                iv = chr.Inventorys[MapleInventoryType.Equip.Value];
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item, false, false, true);
                }

                p.WriteByte(0); // start of use inventory
                iv = chr.Inventorys[MapleInventoryType.Use.Value];
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item, false, false, true);
                }

                p.WriteByte(0); // start of set-up inventory
                iv = chr.Inventorys[MapleInventoryType.Setup.Value];
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item, false, false, true);
                }

                p.WriteByte(0); // start of etc inventory
                iv = chr.Inventorys[MapleInventoryType.Etc.Value];
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item, false, false, true);
                }

                p.WriteByte(0); // start of cash inventory
                iv = chr.Inventorys[MapleInventoryType.Cash.Value];
                foreach (var item in iv.Inventory.Values)
                {
                    AddItemInfo(p, item, false, false, true);
                }

                p.WriteByte(0);
                var skills = chr.Skills;
                p.WriteShort((short)skills.Count);
                foreach (var skill in skills)
                {
                    p.WriteInt(skill.Key.SkillId);
                    p.WriteInt(skill.Value.SkilLevel);
                    if (skill.Key.IsFourthJob)
                    {
                        p.WriteInt(skill.Value.MasterLevel);
                    }
                }
                p.WriteShort(0);
                p.WriteShort(3);
                p.WriteInt(662990);
                p.WriteBytes(new byte[] { 0x5A, 0x5A, 0x5A, 0x5A, 0x45, 0x46, 0x47, 0x48, 0x49, 0x5A, 0xB0, 0x1D, 0x01, 0x00, 0x34, 0x95, 0x08, 0x00, 0x00, 0x11, 0x00, 0xF0, 0x03, 0x00, 0x4D, 0xCE, 0x43, 0x44, 0x63, 0xCA, 0x01, 0x08, 0x04, 0x00, 0x05, 0x05, 0x49, 0x70, 0xFD, 0xC9, 0x01, 0xF1, 0x03, 0x00, 0x07, 0x0B, 0x20, 0x44, 0x63, 0xCA, 0x01, 0x09, 0x04, 0x00, 0xE6, 0xFA, 0x4E, 0x70, 0xFD, 0xC9, 0x01, 0xF2, 0x03, 0x80, 0xF7, 0x05, 0x23, 0x44, 0x63, 0xCA, 0x01, 0x0A, 0x04, 0x00, 0xF4, 0x21, 0x56, 0x70, 0xFD, 0xC9, 0x01, 0xF3, 0x03, 0x80, 0x51, 0x68, 0x25, 0x44, 0x63, 0xCA, 0x01, 0x0B, 0x04, 0x00, 0xF0, 0xC7, 0xCB, 0xE1, 0x00, 0xCA, 0x01, 0x39, 0x20, 0x00, 0x7D, 0xC1, 0x6D, 0xC3, 0x5A, 0xCA, 0x01, 0xF4, 0x03, 0x80, 0xAB, 0xCA, 0x27, 0x44, 0x63, 0xCA, 0x01, 0x0C, 0x04, 0x00, 0xDD, 0x95, 0x0A, 0x44, 0x63, 0xCA, 0x01, 0xFC, 0x03, 0x80, 0x6A, 0xFA, 0x47, 0x44, 0x63, 0xCA, 0x01, 0xB0, 0x1D, 0x80, 0x28, 0x6F, 0x6F, 0x80, 0x63, 0xCA, 0x01, 0xF5, 0x03, 0x00, 0x9C, 0xC5, 0x2A, 0x44, 0x63, 0xCA, 0x01, 0xF6, 0x03, 0x00, 0xF6, 0x27, 0x2D, 0x44, 0x63, 0xCA, 0x01, 0x98, 0x12, 0x80, 0xC4, 0x5C, 0x4A, 0x44, 0x63, 0xCA, 0x01, 0xF7, 0x03, 0x80, 0x40, 0x85, 0x32, 0x44, 0x63, 0xCA, 0x01 });
                p.WriteLong(0);
                for (int i = 0; i < 15; i++)
                {
                    p.WriteBytes(CharInfoMagic);
                }
                p.WriteZero(15);

                p.WriteMapleString(chr.Client.Account.Username);
                if (isMTS)
                {
                    p.WriteInt(5000);
                    p.WriteBytes(new byte[] { 0x07, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x90, 0x63, 0x80, 0x7A, 0x56, 0x49, 0xCA, 0x01 });
                }
                else
                {
                    p.WriteBytes(new byte[] { 0x46, 0x00, 0x00, 0x00, 0x07, 0xA5, 0x9B, 0x00, 0x08, 0xA5, 0x9B, 0x00, 0x09, 0xA5, 0x9B, 0x00, 0x0A, 0xA5, 0x9B, 0x00, 0x0B, 0xA5, 0x9B, 0x00, 0x0C, 0xA5, 0x9B, 0x00, 0x0D, 0xA5, 0x9B, 0x00, 0x0E, 0xA5, 0x9B, 0x00, 0x0F, 0xA5, 0x9B, 0x00, 0x10, 0xA5, 0x9B, 0x00, 0x11, 0xA5, 0x9B, 0x00, 0x12, 0xA5, 0x9B, 0x00, 0x13, 0xA5, 0x9B, 0x00, 0x14, 0xA5, 0x9B, 0x00, 0x15, 0xA5, 0x9B, 0x00, 0x16, 0xA5, 0x9B, 0x00, 0x17, 0xA5, 0x9B, 0x00, 0x18, 0xA5, 0x9B, 0x00, 0x19, 0xA5, 0x9B, 0x00, 0x1A, 0xA5, 0x9B, 0x00, 0x1B, 0xA5, 0x9B, 0x00, 0x1C, 0xA5, 0x9B, 0x00, 0x1D, 0xA5, 0x9B, 0x00, 0x1E, 0xA5, 0x9B, 0x00, 0x1F, 0xA5, 0x9B, 0x00, 0x20, 0xA5, 0x9B, 0x00, 0x21, 0xA5, 0x9B, 0x00, 0x22, 0xA5, 0x9B, 0x00, 0x23, 0xA5, 0x9B, 0x00, 0x24, 0xA5, 0x9B, 0x00, 0x25, 0xA5, 0x9B, 0x00, 0x26, 0xA5, 0x9B, 0x00, 0x27, 0xA5, 0x9B, 0x00, 0x28, 0xA5, 0x9B, 0x00, 0x29, 0xA5, 0x9B, 0x00, 0x2A, 0xA5, 0x9B, 0x00, 0x2B, 0xA5, 0x9B, 0x00, 0x2C, 0xA5, 0x9B, 0x00, 0x2D, 0xA5, 0x9B, 0x00, 0x2E, 0xA5, 0x9B, 0x00, 0x2F, 0xA5, 0x9B, 0x00, 0x30, 0xA5, 0x9B, 0x00, 0x31, 0xA5, 0x9B, 0x00, 0x32, 0xA5, 0x9B, 0x00, 0x33, 0xA5, 0x9B, 0x00, 0x34, 0xA5, 0x9B, 0x00, 0x35, 0xA5, 0x9B, 0x00, 0x36, 0xA5, 0x9B, 0x00, 0x37, 0xA5, 0x9B, 0x00, 0x38, 0xA5, 0x9B, 0x00, 0x39, 0xA5, 0x9B, 0x00, 0x3A, 0xA5, 0x9B, 0x00, 0x3B, 0xA5, 0x9B, 0x00, 0x3C, 0xA5, 0x9B, 0x00, 0x3D, 0xA5, 0x9B, 0x00, 0x3E, 0xA5, 0x9B, 0x00, 0x3F, 0xA5, 0x9B, 0x00, 0x40, 0xA5, 0x9B, 0x00, 0x41, 0xA5, 0x9B, 0x00, 0x42, 0xA5, 0x9B, 0x00, 0x43, 0xA5, 0x9B, 0x00, 0x44, 0xA5, 0x9B, 0x00, 0x45, 0xA5, 0x9B, 0x00, 0x46, 0xA5, 0x9B, 0x00, 0x47, 0xA5, 0x9B, 0x00, 0x48, 0xA5, 0x9B, 0x00, 0x49, 0xA5, 0x9B, 0x00, 0x4A, 0xA5, 0x9B, 0x00, 0x4B, 0xA5, 0x9B, 0x00, 0x4C, 0xA5, 0x9B, 0x00, 0x7B, 0x0B, 0xAC, 0x96, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA5, 0x97, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0xBA, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBB, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC1, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC2, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD5, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD6, 0x97, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x87, 0x98, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA5, 0x98, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xFE, 0x98, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xFF, 0x99, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x27, 0x9B, 0x98, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x9B, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4C, 0x9B, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4F, 0x9B, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x95, 0x9B, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x9D, 0x9B, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x9F, 0x9B, 0x98, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0xFC, 0x9B, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x15, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x17, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x18, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x19, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x1A, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x1B, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x5A, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x5B, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x97, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBC, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC6, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0xC7, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0xC8, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCC, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xCD, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xCE, 0x9C, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x62, 0x01, 0x02, 0xCF, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD3, 0x9C, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x62, 0x01, 0x02, 0xDB, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0xF0, 0x9C, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF8, 0x9C, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x9D, 0x98, 0x00, 0x02, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x9D, 0x98, 0x00, 0x02, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0C, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1A, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x29, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2D, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2E, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2F, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x30, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x32, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x33, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x34, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x37, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3E, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4A, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4B, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4C, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x52, 0x9D, 0x98, 0x00, 0x04, 0x08, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x53, 0x9D, 0x98, 0x00, 0x04, 0x0C, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x01, 0x01, 0x54, 0x9D, 0x98, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00, 0x00, 0x55, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x56, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x57, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x59, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5A, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5C, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5D, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5E, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5F, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x60, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x64, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x67, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x68, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x69, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6D, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x61, 0x02, 0x73, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x77, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x7A, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x7B, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x7E, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x02, 0x82, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x85, 0x9D, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x63, 0x01, 0x02, 0x86, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x88, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x89, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x8A, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x8B, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x8C, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x8D, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x8E, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0x90, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x91, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x92, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x93, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x94, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x95, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0x96, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x97, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x98, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x99, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0x9A, 0x9D, 0x98, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0x9C, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x9D, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x9E, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x9F, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0xA0, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xA1, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xA2, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0xA3, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xA4, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xA5, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xA6, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xA7, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xA8, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xA9, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xAA, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xAB, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xAC, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xAD, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xAE, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0xAF, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0xB0, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xB1, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0xB2, 0x9D, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x63, 0x01, 0x02, 0xB4, 0x9D, 0x98, 0x00, 0x10, 0x04, 0x00, 0x00, 0x62, 0x01, 0xBA, 0x9D, 0x98, 0x00, 0x10, 0x04, 0x00, 0x00, 0x62, 0x01, 0xBF, 0x9D, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x62, 0x01, 0x02, 0xC0, 0x9D, 0x98, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xC1, 0x9D, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x62, 0x01, 0x02, 0xC2, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC3, 0x9D, 0x98, 0x00, 0x10, 0x04, 0x00, 0x00, 0x62, 0x01, 0xC4, 0x9D, 0x98, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x62, 0x01, 0x02, 0xC5, 0x9D, 0x98, 0x00, 0x10, 0x04, 0x00, 0x00, 0x62, 0x01, 0xC6, 0x9D, 0x98, 0x00, 0x10, 0x04, 0x00, 0x00, 0x62, 0x01, 0xC9, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xCA, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0xCD, 0x9D, 0x98, 0x00, 0x10, 0x00, 0x00, 0x00, 0x62, 0xD0, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0xD1, 0x9D, 0x98, 0x00, 0x10, 0x08, 0x00, 0x00, 0x62, 0x02, 0xD2, 0x9D, 0x98, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x6D, 0x1D, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x1D, 0x9A, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x28, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x95, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0x1E, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x66, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9A, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9E, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9F, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA0, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0x1F, 0x9A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC1, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC2, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC3, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC4, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC5, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC6, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC7, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC8, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xC9, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCA, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCB, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCC, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCD, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCE, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xCF, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD0, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD1, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD2, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD3, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD4, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD5, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD6, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD7, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD8, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xD9, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDA, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDB, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDC, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDD, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDE, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xDF, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE0, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE1, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE2, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE3, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE4, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE5, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE6, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE7, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE8, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xE9, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xEA, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xEB, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xEC, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xED, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xEE, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xEF, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF0, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF1, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF2, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF3, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF4, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF5, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF6, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF7, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF8, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xF9, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFA, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFB, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFC, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFD, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFE, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0xFF, 0xA3, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x01, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x02, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x03, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x04, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x05, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x06, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x07, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x08, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x09, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x0F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x10, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x11, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x12, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x13, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x14, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x15, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x16, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x17, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x18, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x19, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x1F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x20, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x21, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x22, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x23, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x24, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x25, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x26, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x27, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x28, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x29, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x2F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x30, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x31, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x32, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x33, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x34, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x35, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x36, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x37, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x38, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x39, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x3F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x40, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x41, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x42, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x43, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x44, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x45, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x46, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x47, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x48, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x49, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x4F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x50, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x51, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x52, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x53, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x54, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x55, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x56, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x57, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x58, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x59, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x5F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x60, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x61, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x62, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x63, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x64, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x65, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x66, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x67, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x68, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x69, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x6F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x70, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x71, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x72, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x73, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x74, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x75, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x76, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x77, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x78, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x79, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x7F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x80, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x81, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x82, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x83, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x84, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x85, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x86, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x87, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x88, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x89, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8A, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8B, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8C, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8D, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8E, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x8F, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x90, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x91, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x92, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x93, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x94, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x95, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x96, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x97, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x98, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x99, 0xA4, 0x9B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x9A, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0x9B, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0x9C, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0x9D, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x9E, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x9F, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xA0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xA1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xA2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x04, 0xA3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xA4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xE4, 0x11, 0x00, 0x00, 0x04, 0xA5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xA6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xA7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0xA8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xA9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xAA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xAB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xAC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x04, 0xAD, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0xAE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xE0, 0x05, 0x00, 0x00, 0x04, 0xAF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x98, 0x0D, 0x00, 0x00, 0x04, 0xB0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xB1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xB2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xB3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xB4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xB5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xB6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xB7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xB8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x04, 0xB9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x04, 0xBA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xFC, 0x0D, 0x00, 0x00, 0x04, 0xBB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xBC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xBD, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xBE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xBF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xC0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00, 0x04, 0xC1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xC2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xC3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x04, 0xC4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x04, 0xC5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x58, 0x07, 0x00, 0x00, 0x04, 0xC6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xC7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xC8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x04, 0xC9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xCA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x46, 0x01, 0x00, 0x00, 0x04, 0xCB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xCC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0xCD, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xCE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xCF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x04, 0xD0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x04, 0xD1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x04, 0xD2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xD3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0xD4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xD5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xD6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xD7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xD8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0xD9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xDA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xDB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x04, 0xDC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xDD, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xDE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xDF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xE0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xE1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xE2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x04, 0xE3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x04, 0xE4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xE5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x04, 0xE6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x04, 0xE7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xE8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xE9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xEA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xEB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xEC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0x04, 0xED, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x04, 0xEE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x04, 0xEF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xF0, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xF1, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x04, 0xF2, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xF3, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x04, 0xF4, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xF5, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xF6, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xF7, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x04, 0xF8, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x04, 0xF9, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xFA, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x04, 0xFB, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0xFC, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x04, 0xFD, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0xFE, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0xFF, 0xA4, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0x00, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x04, 0x01, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x04, 0x02, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x03, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x04, 0x05, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x04, 0x06, 0xA5, 0x9B, 0x00, 0x04, 0x08, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x04, 0x07, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x01, 0x08, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x3C, 0x08, 0x00, 0x00, 0x01, 0x09, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x01, 0x0A, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x01, 0x0B, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x01, 0x0C, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x01, 0x0D, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x0E, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xA4, 0x01, 0x00, 0x00, 0x01, 0x0F, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x9E, 0x0C, 0x00, 0x00, 0x01, 0x10, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x98, 0x04, 0x00, 0x00, 0x01, 0x11, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x01, 0x12, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0C, 0x04, 0x00, 0x00, 0x01, 0x13, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x01, 0x15, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x01, 0x16, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xE6, 0x08, 0x00, 0x00, 0x01, 0x17, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xDC, 0x01, 0x00, 0x00, 0x01, 0x18, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x01, 0x19, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x01, 0x1A, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x01, 0x1B, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x01, 0x1C, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0E, 0x07, 0x00, 0x00, 0x01, 0x1D, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x01, 0x1E, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x01, 0x1F, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xEC, 0x04, 0x00, 0x00, 0x01, 0x20, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x9A, 0x10, 0x00, 0x00, 0x01, 0x21, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x01, 0x22, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xEC, 0x04, 0x00, 0x00, 0x01, 0x23, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x24, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x25, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x01, 0x26, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xA4, 0x01, 0x00, 0x00, 0x01, 0x27, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0x01, 0x28, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xE0, 0x05, 0x00, 0x00, 0x01, 0x29, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0C, 0x04, 0x00, 0x00, 0x01, 0x2A, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x9A, 0x10, 0x00, 0x00, 0x01, 0x2B, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x01, 0x2C, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xDC, 0x01, 0x00, 0x00, 0x01, 0x2D, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xEC, 0x04, 0x00, 0x00, 0x01, 0x2E, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x01, 0x2F, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x01, 0x30, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x01, 0x31, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x01, 0x32, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x01, 0x33, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x34, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xEB, 0x03, 0x00, 0x00, 0x01, 0x35, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x20, 0x12, 0x00, 0x00, 0x01, 0x36, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xC8, 0x06, 0x00, 0x00, 0x01, 0x37, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x38, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xBC, 0x02, 0x00, 0x00, 0x01, 0x39, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xFB, 0x04, 0x00, 0x00, 0x01, 0x3A, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x01, 0x3B, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x01, 0x3C, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x01, 0x3D, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x01, 0x3E, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00, 0x01, 0x3F, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x01, 0x40, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x52, 0x04, 0x00, 0x00 });
                    p.WriteBytes(new byte[] { 0x01, 0x41, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x42, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xA8, 0x07, 0x00, 0x00, 0x01, 0x43, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xEA, 0x04, 0x00, 0x00, 0x01, 0x44, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xAE, 0x02, 0x00, 0x00, 0x01, 0x45, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x01, 0x46, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x01, 0x47, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x01, 0x48, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x01, 0x49, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x01, 0x4A, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xDC, 0x01, 0x00, 0x00, 0x01, 0x4B, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0xDC, 0x01, 0x00, 0x00, 0x01, 0x4C, 0xA5, 0x9B, 0x00, 0x04, 0x04, 0x00, 0x00, 0x6A, 0x05, 0x00, 0x00, 0x01, 0x60, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x61, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA4, 0x06, 0x00, 0x00, 0x62, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x63, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x64, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x65, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0x66, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3F, 0x05, 0x00, 0x00, 0x67, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x68, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA8, 0x02, 0x00, 0x00, 0x69, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x6A, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x6B, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x6C, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x6D, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x6E, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x6F, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x70, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x71, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x72, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x73, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x74, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x91, 0x08, 0x00, 0x00, 0x75, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x76, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x77, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0x78, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA9, 0x01, 0x00, 0x00, 0x79, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x7A, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x7B, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x7C, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x7D, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x7E, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x7F, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0x80, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x81, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x82, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x83, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x84, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x85, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x86, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x87, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3F, 0x05, 0x00, 0x00, 0x88, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x89, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x8A, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x8B, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x8C, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x8D, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0x8E, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x8F, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xED, 0x01, 0x00, 0x00, 0x90, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x91, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x92, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x93, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x94, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x95, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x96, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x97, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x98, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x99, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3C, 0x06, 0x00, 0x00, 0x9A, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x9B, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x05, 0x00, 0x00, 0x9C, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x9D, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x9E, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x9F, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xA0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0xA1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xA2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x54, 0x06, 0x00, 0x00, 0xA3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0xA4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xA5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xA6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0xA7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xA8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0xA9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x02, 0x00, 0x00, 0xAA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDA, 0x04, 0x00, 0x00, 0xAB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0xAC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA3, 0x03, 0x00, 0x00, 0xAD, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0xAE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xAF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xB0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0xB1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0xB2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0xB3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0xB4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0xB5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0xB6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0xB7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x09, 0x00, 0x00, 0xB8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0, 0x01, 0x00, 0x00, 0xB9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0xBA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0xBB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDB, 0x01, 0x00, 0x00, 0xBC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x05, 0x00, 0x00, 0xBD, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0xBE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0xBF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1D, 0x01, 0x00, 0x00, 0xC0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0xC1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0xC2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xC3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0xC4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDA, 0x04, 0x00, 0x00, 0xC5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xC6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xC7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0xC8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xC9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xCA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xCB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00, 0xCC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0xCD, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4D, 0x08, 0x00, 0x00, 0xCE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xCF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF2, 0x09, 0x00, 0x00, 0xD0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0xD1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94, 0x05, 0x00, 0x00, 0xD2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xD3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFD, 0x0C, 0x00, 0x00, 0xD4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9C, 0x06, 0x00, 0x00, 0xD5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x92, 0x07, 0x00, 0x00, 0xD6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xD7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA3, 0x03, 0x00, 0x00, 0xD8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x05, 0x00, 0x00, 0xD9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0xDA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0xDB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x12, 0x00, 0x00, 0xDC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0xDD, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0xDE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0xDF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0xE0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0xE1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0xE2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0xE3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0xE4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xE5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0xE6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0xE7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEA, 0x04, 0x00, 0x00, 0xE9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xEA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0xEB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xEC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0xED, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0xEE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x07, 0x00, 0x00, 0xEF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0xF0, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xF1, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0xF2, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00, 0xF3, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0xF4, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0xF5, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xF6, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0xF7, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0xF8, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xF9, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0xFA, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x05, 0x00, 0x00, 0xFB, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0xFC, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xFD, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xFE, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0xFF, 0x2A, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1A, 0x0E, 0x00, 0x00, 0x00, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x01, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x12, 0x00, 0x00, 0x02, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x03, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x04, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x05, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x05, 0x00, 0x00, 0x07, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x08, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x09, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x0A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x0B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x0C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x0E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x0F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3E, 0x06, 0x00, 0x00, 0x10, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x11, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x12, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00, 0x13, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x14, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x14, 0x00, 0x00, 0x15, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x16, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x17, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x18, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00, 0x19, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x1A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0x1B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x12, 0x00, 0x00, 0x1C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x1D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x1E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x1F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x20, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x21, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x22, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x23, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1D, 0x01, 0x00, 0x00, 0x24, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0, 0x01, 0x00, 0x00, 0x25, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x26, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x27, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x28, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x29, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00, 0x2A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x2B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x2C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x2D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEA, 0x04, 0x00, 0x00, 0x2E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x2F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBE, 0x02, 0x00, 0x00, 0x30, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x31, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x32, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x33, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x34, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x35, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x36, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x37, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0x04, 0x00, 0x00, 0x38, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00, 0x39, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x3A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x3B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x3C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFA, 0x05, 0x00, 0x00, 0x3D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x3E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x3F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x40, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x41, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x42, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00, 0x43, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x44, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0x04, 0x00, 0x00, 0x45, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x61, 0x04, 0x00, 0x00, 0x46, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDA, 0x04, 0x00, 0x00, 0x47, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x48, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x49, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x4A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x4B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0, 0x01, 0x00, 0x00, 0x4C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x4D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x4E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA3, 0x03, 0x00, 0x00, 0x4F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0x50, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0x51, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x52, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x53, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA4, 0x06, 0x00, 0x00, 0x54, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x55, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x56, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x57, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0x58, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x59, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x5A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x5B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA3, 0x03, 0x00, 0x00, 0x5C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8C, 0x0A, 0x00, 0x00, 0x5D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x5E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x5F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 0x60, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x09, 0x00, 0x00, 0x61, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x62, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x63, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x64, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00, 0x65, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x66, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x67, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x00, 0x68, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x69, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x6A, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x6B, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x6C, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x02, 0x00, 0x00, 0x6D, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x6E, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00, 0x6F, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x70, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x00, 0x71, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x72, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x73, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x05, 0x00, 0x00, 0x74, 0x2B, 0x9D, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00, 0x12, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x2D, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x24, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2C, 0x2D, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x2D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x30, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x31, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x32, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x34, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x35, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x36, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x43, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x2D, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x82, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x84, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8C, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9A, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC9, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDF, 0x2D, 0x31, 0x01, 0x14, 0x0C, 0x00, 0x00, 0x62, 0x97, 0x02, 0x00, 0x00, 0x01, 0x01, 0xE0, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE3, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF2, 0x2D, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xF3, 0x2D, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xF4, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF6, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF7, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFA, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFB, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFC, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFD, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFE, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFF, 0x2D, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2A, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2B, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2F, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x30, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x31, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x32, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x34, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x35, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x36, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x43, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x44, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x82, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x83, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x84, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x85, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x87, 0x2E, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x88, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x8C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x95, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x98, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9A, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9E, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9F, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA0, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB3, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD6, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0x2E, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xDB, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0x2E, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xDD, 0x2E, 0x31, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xDE, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE3, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE6, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEE, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEF, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0x2E, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xF2, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xFA, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFB, 0x2E, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFC, 0x2E, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x01, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x02, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x03, 0x2F, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x2F, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x07, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0A, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0B, 0x2F, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0C, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0D, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0E, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x10, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x11, 0x2F, 0x31, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x13, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x14, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1C, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1D, 0x2F, 0x31, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x21, 0x2F, 0x31, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x22, 0x2F, 0x31, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x23, 0x2F, 0x31, 0x01, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0x24, 0x2F, 0x31, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x25, 0x2F, 0x31, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x26, 0x2F, 0x31, 0x01, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0x27, 0x2F, 0x31, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x2F, 0x2F, 0x31, 0x01, 0x10, 0x04, 0x00, 0x00, 0x61, 0x01, 0x31, 0x2F, 0x31, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x32, 0x2F, 0x31, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0xA0, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA7, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0xB3, 0x32, 0x01, 0x14, 0x0C, 0x00, 0x00, 0x62, 0x42, 0x02, 0x00, 0x00, 0x01, 0x01, 0xA9, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xB3, 0x32, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC1, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC9, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCD, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0xB3, 0x32, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD5, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD9, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0xB3, 0x32, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0xDF, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE0, 0xB3, 0x32, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0xE1, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE2, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE6, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEA, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEC, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xED, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEE, 0xB3, 0x32, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEF, 0xB3, 0x32, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0xF0, 0xB3, 0x32, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF2, 0xB3, 0x32, 0x01, 0x10, 0x08, 0x00, 0x00, 0x63, 0x00, 0x40, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x43, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x66, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x68, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x73, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x7D, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7E, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7F, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x81, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x82, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x84, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x85, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x88, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x95, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x96, 0x3A, 0x34, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x98, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x3A, 0x34, 0x01, 0x00 });
                    p.WriteBytes(new byte[] { 0x0C, 0x00, 0x00, 0x01, 0x02, 0x9A, 0x3A, 0x34, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0x3A, 0x34, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xEA, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEC, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xED, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEE, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEF, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF3, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF4, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF6, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF7, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF8, 0xC0, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xF9, 0xC0, 0x35, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xFA, 0xC0, 0x35, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xFB, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFC, 0xC0, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x03, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x05, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x06, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x07, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x10, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0xC1, 0x35, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x4A, 0xC1, 0x35, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x4B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x66, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x68, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x72, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x73, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x77, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x78, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x79, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7C, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7F, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0xC1, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x87, 0xC1, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x88, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x94, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x98, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9E, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0xC1, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xA3, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC1, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC2, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCD, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0xC1, 0x35, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD3, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD9, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDF, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE7, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF2, 0xC1, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF4, 0xC1, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xF5, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF6, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF7, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF8, 0xC1, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xF9, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xFC, 0xC1, 0x35, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x02, 0xC2, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x03, 0xC2, 0x35, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0xC2, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0xC2, 0x35, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0xC2, 0x35, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x8E, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x94, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x95, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x97, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x98, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9A, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9E, 0x47, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x9F, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA0, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDF, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEA, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEC, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEF, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0x47, 0x37, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xF1, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF3, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF4, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF6, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF7, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF9, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFA, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFB, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFC, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFD, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFE, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFF, 0x47, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x06, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0x48, 0x37, 0x01, 0x10, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x10, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1B, 0x48, 0x37, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x1F, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2A, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0x48, 0x37, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x38, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3B, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0x48, 0x37, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x43, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4C, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5B, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5D, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x63, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x66, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x67, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x68, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x69, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x6A, 0x48, 0x37, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x6B, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x6C, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x6E, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x6F, 0x48, 0x37, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x70, 0x48, 0x37, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0x48, 0x37, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x72, 0x48, 0x37, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x73, 0x48, 0x37, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x74, 0x48, 0x37, 0x01, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x31, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x32, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x34, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x35, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x36, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0xCE, 0x38, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x3B, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x42, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x43, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x77, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x78, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x79, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7C, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x82, 0xCE, 0x38, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x83, 0xCE, 0x38, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x84, 0xCE, 0x38, 0x01, 0x10, 0x04, 0x00, 0x00, 0x01, 0x01, 0x85, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x87, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x88, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x90, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0xCE, 0x38, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x92, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x94, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x95, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x97, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x98, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAB, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBF, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCD, 0xCE, 0x38, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCE, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0xCE, 0x38, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0xCE, 0x38, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xC9, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0x54, 0x3A, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD7, 0x54, 0x3A, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD8, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0x54, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xDF, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE0, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x54, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE3, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE6, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEA, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFC, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFD, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFE, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFF, 0x54, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x03, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x05, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x06, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x07, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0A, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x10, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1B, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1D, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x55, 0x3A, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x2B, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x31, 0x55, 0x3A, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x32, 0x55, 0x3A, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x33, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x3A, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3B, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3D, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x55, 0x3A, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5D, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x60, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x61, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x65, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x66, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x68, 0x55, 0x3A, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x6E, 0x55, 0x3A, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x61, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0xDB, 0x3B, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x65, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x66, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0xDB, 0x3B, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6F, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x72, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x73, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x75, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x77, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x78, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x79, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7F, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x80, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x81, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x85, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x86, 0xDB, 0x3B, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x8A, 0xDB, 0x3B, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0D, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x0E, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x0F, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x10, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x15, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x17, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x18, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x30, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x31, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x32, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x34, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x36, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x41, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x43, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x52, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x54, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x57, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x62, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x66, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x6E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x72, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x73, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x77, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x78, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x79, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7C, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x7D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7E, 0x62, 0x3D, 0x01, 0x10, 0x04, 0x00, 0x00, 0x04, 0x01, 0x7F, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x84, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x85, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x88, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x8C, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x8D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x94, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x95, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x97, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x98, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x99, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x9A, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x9B, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA7, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xA8, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xA9, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xAA, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xAB, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAC, 0x62, 0x3D, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xAD, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAE, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB1, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB2, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB9, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBA, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBC, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBF, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC0, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC2, 0x62, 0x3D, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC5, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC6, 0x62, 0x3D, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xC7, 0x62, 0x3D, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xC9, 0x62, 0x3D, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xCA, 0x62, 0x3D, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xCB, 0x62, 0x3D, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xCC, 0x62, 0x3D, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xCD, 0x62, 0x3D, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xCE, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD2, 0x62, 0x3D, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xD3, 0x62, 0x3D, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0xA8, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xBB, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC1, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0xE8, 0x3E, 0x01, 0x10, 0x04, 0x00, 0x00, 0x01, 0x01, 0xCE, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD2, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xDE, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xDF, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE0, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0xE8, 0x3E, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0xE8, 0x3E, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE9, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEA, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEB, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEC, 0xE8, 0x3E, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xEF, 0xE8, 0x3E, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xF1, 0xE8, 0x3E, 0x01, 0x10, 0x04, 0x00, 0x00, 0x61, 0x01, 0x51, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x6F, 0x40, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5D, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x6F, 0x40, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5F, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x6F, 0x40, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0x6F, 0x40, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x62, 0x6F, 0x40, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x63, 0x6F, 0x40, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE3, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE6, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEA, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEC, 0xF5, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xED, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEE, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF2, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF3, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF4, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF6, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF7, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF8, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF9, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFA, 0xF5, 0x41, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0xFC, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFE, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFF, 0xF5, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x03, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x08, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0D, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0E, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1D, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x23, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2C, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2E, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x30, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x33, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x34, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x36, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x39, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3C, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x3E, 0xF6, 0x41, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x42, 0xF6, 0x41, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x43, 0xF6, 0x41, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x44, 0xF6, 0x41, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x45, 0xF6, 0x41, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x48, 0xF6, 0x41, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x80, 0x7C, 0x43, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x81, 0x7C, 0x43, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0x7C, 0x43, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0x7C, 0x43, 0x01, 0x00, 0x08, 0x00, 0x00, 0x02, 0x8C, 0x7C, 0x43, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0x7C, 0x43, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x97, 0x7C, 0x43, 0x01, 0x10, 0x04, 0x00, 0x00, 0x61, 0x01, 0x9A, 0x7C, 0x43, 0x01, 0x10, 0x04, 0x00, 0x00, 0x61, 0x01, 0x80, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x81, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x82, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x84, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x85, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x87, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x88, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8C, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0xC3, 0xC9, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x97, 0xC3, 0xC9, 0x01, 0x10, 0x00, 0x00, 0x00, 0x05, 0x9A, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0xC3, 0xC9, 0x01, 0x02, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x01, 0x9E, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9F, 0xC3, 0xC9, 0x01, 0x02, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x01, 0xA0, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0xC3, 0xC9, 0x01, 0x02, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x01, 0xA8, 0xC3, 0xC9, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA9, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xC3, 0xC9, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAB, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0xC3, 0xC9, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB2, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB3, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB4, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB5, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB6, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB7, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB8, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xB9, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBA, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBB, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBC, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBD, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBE, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xBF, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00 });
                    p.WriteBytes(new byte[] { 0x03, 0xC0, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC1, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC2, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC3, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC4, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC5, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC6, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC7, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC8, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC9, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCA, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCB, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCC, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCD, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCE, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xCF, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD0, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD1, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD2, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD3, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD4, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD5, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xD6, 0xC3, 0xC9, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x20, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2C, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2D, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0x4A, 0xCB, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2F, 0x4A, 0xCB, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x36, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x38, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x39, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3A, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3B, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x59, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5C, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5D, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x68, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0x4A, 0xCB, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6B, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6C, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6D, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6E, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x6F, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x75, 0x4A, 0xCB, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x76, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x77, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x78, 0x4A, 0xCB, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x7A, 0x4A, 0xCB, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x7B, 0x4A, 0xCB, 0x01, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xC0, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0xD0, 0xCC, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC2, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0xD0, 0xCC, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD1, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0xD0, 0xCC, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xD7, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0xD0, 0xCC, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xDE, 0xD0, 0xCC, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE0, 0xD0, 0xCC, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE2, 0xD0, 0xCC, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE3, 0xD0, 0xCC, 0x01, 0x00, 0x08, 0x00, 0x00, 0x03, 0x80, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x81, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x82, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x84, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x85, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x87, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x88, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x89, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8C, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x90, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x91, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x94, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x95, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x96, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x97, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x98, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x99, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9A, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9B, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9C, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9D, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9E, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x9F, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA0, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC0, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0xF0, 0xFA, 0x02, 0x10, 0x0C, 0x00, 0x00, 0x60, 0x01, 0x02, 0xD1, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0xF0, 0xFA, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2A, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2B, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2C, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2D, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2E, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x30, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x31, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x32, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x33, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x3F, 0x77, 0xFC, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x77, 0xFC, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xC2, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC9, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDF, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE0, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE3, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEA, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0xFD, 0xFD, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0xFD, 0xFD, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0x84, 0xFF, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x01, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0C, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0D, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0E, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0F, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x10, 0x0B, 0x01, 0x03, 0x10, 0x04, 0x00, 0x00, 0x60, 0x01, 0x11, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x02, 0x15, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x02, 0x17, 0x0B, 0x01, 0x03, 0x28, 0x00, 0x00, 0x00, 0x01, 0x25, 0x00, 0x1D, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1F, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x20, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x23, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x24, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x25, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x26, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x27, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x28, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2E, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x2F, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x30, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x37, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x3C, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x3D, 0x0B, 0x01, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x60, 0x01, 0x02, 0x3E, 0x0B, 0x01, 0x03, 0x10, 0x04, 0x00, 0x00, 0x60, 0x01, 0x3F, 0x0B, 0x01, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x60, 0x01, 0x02, 0x40, 0x0B, 0x01, 0x03, 0x10, 0x04, 0x00, 0x00, 0x60, 0x01, 0x41, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x42, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x44, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x4A, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x4B, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x4C, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x4D, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x56, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x57, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x58, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x59, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x61, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x62, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x63, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x64, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x66, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x67, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x68, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x69, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6F, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x71, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x72, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x73, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x74, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x77, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x78, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x79, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0x0B, 0x01, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x02, 0x7C, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x7D, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x7F, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x81, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x60, 0x01, 0x02, 0x88, 0x0B, 0x01, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x89, 0x0B, 0x01, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xA0, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA1, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA9, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAA, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAB, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC9, 0x91, 0x02, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xCA, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xCF, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD0, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD1, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xD2, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xDE, 0x91, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xE1, 0x91, 0x02, 0x03, 0x10, 0x08, 0x00, 0x00, 0x5A, 0x03, 0xE3, 0x91, 0x02, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xE4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE6, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE8, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEA, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEB, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEC, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xED, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEE, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEF, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0x91, 0x02, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF3, 0x91, 0x02, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xF4, 0x91, 0x02, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0x91, 0x02, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x00, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x01, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x02, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x03, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x05, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0B, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x0D, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0F, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x10, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0x87, 0x93, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0x12, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x13, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x14, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x17, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x18, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x19, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1B, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1C, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1D, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1E, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x21, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x22, 0x87, 0x93, 0x03, 0x10, 0x04, 0x00, 0x00, 0x04, 0x01, 0x23, 0x87, 0x93, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x29, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2C, 0x87, 0x93, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x2E, 0x87, 0x93, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0xA1, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA2, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA3, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA4, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA5, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA6, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA7, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xA8, 0x0D, 0x95, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xA9, 0x0D, 0x95, 0x03, 0x10, 0x00, 0x00, 0x00, 0x05, 0xAA, 0x0D, 0x95, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAB, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAD, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAE, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAF, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB0, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB1, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB2, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBB, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBC, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBD, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBE, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBF, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC9, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCA, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCB, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCE, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x0D, 0x95, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0x0D, 0x95, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x40, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x41, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x44, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x45, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x46, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x47, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x48, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x49, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4A, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4B, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4C, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4D, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4E, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x4F, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x50, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x51, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x52, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x53, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x54, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x55, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x56, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x57, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x58, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x59, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5A, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5B, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x5D, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5E, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x5F, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x60, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x61, 0x94, 0x96, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x62, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x63, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x64, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x65, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x66, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x67, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x68, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x69, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6A, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6B, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6C, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6D, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x6E, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x70, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x72, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x75, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x76, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x77, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x78, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7A, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7B, 0x94, 0x96, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x7C, 0x94, 0x96, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x7D, 0x94, 0x96, 0x03, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x82, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x83, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x84, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x85, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x86, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x87, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0x88, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0x89, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8A, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8B, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8C, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8D, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8E, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x8F, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0x90, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0x91, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x92, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x93, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xAC, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAD, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAE, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xAF, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB0, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB1, 0x1D, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0xB2, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB3, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB4, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB5, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB6, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB7, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB8, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xB9, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xBA, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC1, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC2, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC3, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC4, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC5, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC6, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC7, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xC8, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCC, 0x1D, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x02, 0xCE, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCF, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD0, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD1, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD2, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD3, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD4, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD5, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD6, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD7, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD8, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xD9, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDA, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDB, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDC, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDD, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDE, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xDF, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE0, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE1, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE3, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE4, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE5, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE6, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE7, 0x1D, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x02, 0xE8, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE9, 0x1D, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x03, 0xEA, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0xEB, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0xEC, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0xED, 0x1D, 0x2C, 0x04, 0x10, 0x00, 0x00, 0x00, 0x05, 0xEE, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xEF, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF0, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF1, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF2, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF3, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF4, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF5, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF6, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF7, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xF9, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFB, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xFD, 0x1D, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x09, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0A, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0B, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x02, 0x0C, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x02, 0x0D, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0E, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x0F, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x10, 0x1E, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x11, 0x1E, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x12, 0x1E, 0x2C, 0x04, 0x04, 0x0C, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x01, 0x01, 0x13, 0x1E, 0x2C, 0x04, 0x04, 0x0C, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x01, 0x01, 0x14, 0x1E, 0x2C, 0x04, 0x04, 0x0C, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00, 0x01, 0x01, 0x15, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x16, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x03, 0x17, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x03, 0x18, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x03, 0x19, 0x1E, 0x2C, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0x1A, 0x1E, 0x2C, 0x04, 0x00, 0x08, 0x00, 0x00, 0x02, 0x1B, 0x1E, 0x2C, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x02, 0x1C, 0x1E, 0x2C, 0x04, 0x10, 0x08, 0x00, 0x00, 0x5A, 0x02, 0x1D, 0x1E, 0x2C, 0x04, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x1E, 0x1E, 0x2C, 0x04, 0x10, 0x04, 0x00, 0x00, 0x55, 0x01, 0x1F, 0x1E, 0x2C, 0x04, 0x10, 0x0C, 0x00, 0x00, 0x5A, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x10, 0x00, 0x06, 0x00, 0x08, 0x00, 0xA0, 0x01, 0x13, 0x00, 0x18, 0x56, 0xA1, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x00, 0x06, 0x01, 0x0E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x06, 0x00, 0x0C, 0x00, 0xB8, 0x01, 0x13, 0x00, 0xE8, 0x53, 0xA1, 0x0A, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x2F, 0x00, 0x39, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2F, 0x00, 0x65, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x87, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x0B, 0x01, 0x03, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xF0, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 });
                }
                return p;
            }
        }

        public static OutPacket SendWishList(int characterid)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x46);
                //Connection con = DatabaseConnection.getConnection();
                int i = 10;

                //try
                //{
                //    PreparedStatement ps = con.prepareStatement("SELECT sn FROM wishlist WHERE charid = ? LIMIT 10");
                //    ps.setInt(1, characterid);
                //    ResultSet rs = ps.executeQuery();
                //    while (rs.next())
                //    {
                //        p.writeInt(rs.getInt("sn"));
                //        i--;

                //    }
                //    rs.close();
                //    ps.close();
                //}
                //catch (SQLException se)
                //{
                //    log.info("Error getting wishlist data:", se);
                //}

                for (; i > 0; i--)
                    p.WriteInt(0);

                return p;
            }
        }

        public static OutPacket ShowNXMapleTokens(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.CsUpdate))
            {
                p.WriteInt(chr.NexonPoint); // Paypal/PayByCash NX
                p.WriteInt(chr.MaplePoint); // Maple Points
                return p;
            }
        }

        public static OutPacket GetCashShopInventory(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x42);
                MapleCashShopInventory csinv = chr.CashShopInventory;
                p.WriteShort((short)csinv.CashShopItems.Count);
                foreach (var citem in csinv.CashShopItems.Values)
                {
                    p.WriteInt(citem.UniqueId);
                    p.WriteInt(0);
                    p.WriteInt(chr.Account.Id);
                    p.WriteInt(0);
                    p.WriteInt(citem.ItemId);
                    p.WriteInt(citem.Sn);
                    p.WriteShort(citem.Quantity);
                    p.WriteString(citem.Sender);
                    for (int i = Encoding.Default.GetByteCount(citem.Sender); i < 13; i++)
                    {
                        p.WriteByte(0);
                    }
                    p.WriteLong(citem.Expire == null ? DateUtiliy.GetFileTimestamp(FinalTime) : DateUtiliy.GetFileTimestamp(citem.Expire.Value.GetTimeMilliseconds()));
                    p.WriteLong(0);
                }

                p.WriteShort(4);
                p.WriteShort(3);
                return p;
            }
        }

        public static OutPacket GetCashShopGifts(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x44);//32

                var inv = chr.CashShopInventory.CashShopGifts.Values;
                p.WriteShort((short)inv.Count);
                foreach (var gift in inv)
                {
                    p.WriteInt(gift.UniqueId);
                    p.WriteInt(0);
                    p.WriteInt(gift.ItemId);
                    p.WriteString(gift.Sender);
                    for (int i = Encoding.Default.GetByteCount(gift.Sender); i < 13; i++)
                    {
                        p.WriteByte(0);
                    }
                    p.WriteString(gift.Message);
                    for (int i = Encoding.Default.GetByteCount(gift.Message); i < 73; i++)
                    {
                        p.WriteByte(0);
                    }
                }
                return p;
            }
        }


        /// <summary>
        /// 发送错误信息到客户端，可以有以下取值：   
        /// <para>0x01 - 现在关闭了缩地门</para>
        /// <para>0x02 - 不能去那里</para>
        /// <para>0x03 - 对不起，正在准备冒险岛ONLINE商城</para>
        /// <para>0x04 - 因为有地气阻挡，无法接近。</para>
        /// <para>0x05 - 无法进行瞬间移动的地区。</para>
        /// <para>0x06 - 因为有地气阻挡，无法接近</para>
        /// <para>0x07 - 你因不当行为，而遭游戏管理员禁止攻击，禁止获取经验值和金币，禁止交易，禁止丢弃道具，禁止开启个人商店与精灵商人，禁止组队，禁止使用拍卖系统，因此无法使用改功能。</para>
        /// </summary>
        /// <param name="type">错误信息的类型</param>
        /// <returns><list type="sss"></list></returns>
        public static OutPacket SendBlockedMessage(byte type)
        {
            using (var p = new OutPacket(SendOpcodes.BlockMsg))
            {
                p.WriteByte(type);
                return p;
            }
        }

        public static OutPacket ShowBoughtCashShopItem(MapleClient c, MapleCashShopInventoryItem item)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x4C);
                p.WriteInt(item.UniqueId);
                p.WriteInt(0);
                p.WriteInt(c.Account.Id);
                p.WriteInt(0);
                p.WriteInt(item.ItemId);
                p.WriteInt(item.Sn);
                p.WriteShort(item.Quantity);

                string s = item.Sender;
                if (Encoding.Default.GetByteCount(s) > 12)
                {
                    s = s.Substring(0, 12);
                }
                p. WriteString(s);
                p.WriteZero(12 - Encoding.Default.GetByteCount(s));

                p.WriteBytes(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00 });
                p.WriteLong(item.Expire == null ? DateUtiliy.GetFileTimestamp(FinalTime) :DateUtiliy.GetFileTimestamp(item.Expire.Value.GetTimeMilliseconds()));
                p.WriteLong(0);

                return p;
            }
        }

        public static OutPacket ShowCannotToMe()
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x43);
                p.WriteByte(0x8D);
                return p;
            }
        }

        public static OutPacket EnableCashShopOrMTS()
        {
            using (var p = new OutPacket())
            {
                p.WriteBytes(new byte[] { 0x15, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 });
                return p;
            }
        }

        public static OutPacket UpdateCharLook(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.UpdateCharLook))
            {
                p.WriteInt(chr.Id);
                p.WriteByte(0x01);
                LoginPacket.AddCharLook(p, chr, false);
                MapleInventory iv = chr.Inventorys[MapleInventoryType.Equipped.Value];
                List<IMapleItem> equippedC = iv.Inventory.Values.ToList();
                List<Item> equipped = new  List<Item>(equippedC.Count);
                foreach (var item in equippedC)
                {
                    equipped.Add((Item)item);
                }
                equipped.Sort();
                List<IEquip> rings = new List<IEquip>();
                foreach (var item in equipped)
                {
                    if (item.ItemId >= 1112800 && item.ItemId <= 1112802 || item.ItemId >= 1112001 && item.ItemId <= 1112003)
                    {
                        rings.Add(MapleRing.LoadFromDb(item.ItemId, item.Position, item.UniqueId));
                    }
                }
                rings.Sort();
                if (rings.Any())
                {
                    p.WriteByte(0x00);
                    foreach (var ring in rings)
                    {
                        p.WriteByte(0x01);
                        p.WriteInt(1);//?
                        p.WriteInt(ring.UniqueId);
                        p.WriteInt(0);
                        p.WriteInt(ring.PartnerUniqueId);
                        p.WriteInt(0);
                        p.WriteInt(ring.ItemId);
                    }
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteByte(0);
                    p.WriteShort(0);
                }
                return p;
            }
        }

        public static OutPacket DropInventoryItemUpdate(MapleInventoryType type, IMapleItem item)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBytes(new byte[] { 0x01, 0x01, 0x01 });
                p.WriteByte(type.Value);
                p.WriteShort(item.Position);
                p.WriteShort(item.Quantity);

                return p;
            }
        }

        public static OutPacket DropInventoryItem(MapleInventoryType type, short src)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBytes (new byte[] { 0x01, 0x01, 0x03 });
                p.WriteByte(type.Value);
                p.WriteShort(src);
                if (src < 0)
                {
                    p.WriteByte(0x01);
                }

                return p;
            }
        }

        public static OutPacket ShowChair(int characterid, int itemid)
        {
            using (var p = new OutPacket(SendOpcodes.ShowChair))
            {
                p.WriteInt(characterid);
                p.WriteInt(itemid);
                return p;
            }
        }


        public static OutPacket CancelChair(short id=-1)
        {
            using (var p = new OutPacket(SendOpcodes.CancelChair))
            {
                if (id == -1)
                {
                    p.WriteByte(0);
                }
                else
                {
                    p.WriteByte(1);
                    p.WriteShort(id);
                }
                return p;
            }
        }

        public static OutPacket PetStatUpdate(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.UpdateStats))
            {
                int mask = 0;
                mask |= (int)MapleStat.Pet;
                p.WriteByte(0);
                p.WriteInt(mask);
                var pets = chr.Pets;
                foreach (var pet in pets)
                {
                    p.WriteInt(pet.UniqueId);
                    p.WriteInt(0);
                }
                for (int i = 0; i < 3 - pets.Count; i++)
                {
                    p.WriteLong(0);
                }
                p.WriteByte(0);

                return p;
            }
        }

        public static OutPacket UpdatePet(MaplePet pet, bool alive)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteByte(0);
                p.WriteByte(2);
                p.WriteByte(3);
                p.WriteByte(5);
                p.WriteByte(pet.Position);
                p.WriteShort(0);
                p.WriteByte(5);
                p.WriteByte(pet.Position);
                p.WriteByte(0);
                p.WriteByte(3);
                p.WriteInt(pet.ItemId);
                p.WriteByte(1);
                p.WriteInt(pet.UniqueId);
                p.WriteInt(0);
                //mplew.writeLong(DateUtil.getFileTimestamp(item.getExpiration() == null ? FINAL_TIME : item.getExpiration().getTime()));
                p.WriteBytes(new byte[] { 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02 });
                string petname = pet.PetInfo.Name;
                if (Encoding.Default.GetByteCount(petname) > 13)
                {
                    petname = petname.Substring(0, 13);
                }
                p.WriteString(petname);
                p.WriteZero(13 - Encoding.Default.GetByteCount(petname));
                p.WriteByte(pet.PetInfo.Level);
                p.WriteShort(pet.PetInfo.Closeness);
                p.WriteByte(pet.PetInfo.Fullness);
                if (alive)
                {
                    p.WriteLong(DateUtiliy.GetFileTimestamp((long)(DateTime.Now.GetTimeMilliseconds() * 1.5), false));
                    p.WriteBytes(new byte[] { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00 });
                }
                else
                {
                    p.WriteLong(DateUtiliy.GetFileTimestamp(FinalTime));
                }
                p.WriteInt(0);

                return p;
            }
        }
        public static OutPacket CommandResponse(int cid, byte slot, byte animation, bool success)
        {
            using (var p = new OutPacket(SendOpcodes.PetCommand))
            {
                p.WriteInt(cid);
                p.WriteByte(slot);
                p.WriteByte((byte)(animation == 1 && success ? 1 : 0));
                p.WriteByte(animation);
                if (animation == 1)
                {
                    p.WriteByte(0);
                }
                else
                {
                    p.WriteShort((short)(success ? 1 : 0));
                }
                return p;
            }
        }
        public static OutPacket ShowPetLevelUp(MapleCharacter chr, byte index)
        {
            using (var p = new OutPacket(SendOpcodes.ShowForeignEffect))
            {
                p.WriteInt(chr.Id);
                p.WriteByte(4);
                p.WriteByte(0);
                p.WriteByte(index);

                return p;
            }
        }

        public static OutPacket PetChat(int cid, byte slot, short act, string text)
        {
            using (var p = new OutPacket(SendOpcodes.PetChat))
            {
                p.WriteInt(cid);
                p.WriteByte(slot);
                p.WriteShort(act);
                p.WriteMapleString(text);
                p.WriteByte(0);
                return p;
            }
        }

        public static OutPacket MovePet(int cid, int pid, byte slot, List<ILifeMovementFragment> moves)
        {
            using (var p = new OutPacket(SendOpcodes.MovePet))
            {
                p.WriteInt(cid);
                p.WriteByte(slot);
                p.WriteInt(pid);
                serializeMovementList(p, moves);

                return p;
            }
        }

        public static OutPacket CharInfo(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.CharInfo))
            {
                p.WriteInt(chr.Id);
                p.WriteByte(chr.Level);
                p.WriteShort(chr.Job?.JobId ?? 0);
                p.WriteShort(chr.Fame);
                p.WriteBool(chr.IsMarried); // heart red or gray
                string guildName = "-";
                string allianceName = "-";
                //MapleGuildSummary gs = chr.getClient().getChannelServer().getGuildSummary(chr.getGuildId());
                //if (chr.getGuildId() > 0 && gs != null)
                //{
                //    guildName = gs.getName();
                //    try
                //    {
                //        MapleAlliance alliance = chr.getClient().getChannelServer().getWorldInterface().getAlliance(gs.getAllianceId());
                //        if (alliance != null)
                //        {
                //            allianceName = alliance.getName();
                //        }
                //    }
                //    catch (RemoteException re)
                //    {
                //        re.printStackTrace();
                //        chr.getClient().getChannelServer().reconnectWorld();
                //    }
                //}
                p.WriteMapleString(guildName);
                p.WriteMapleString(allianceName); // Alliance

                foreach (var pet in chr.Pets)
                {
                    p.WriteByte((byte)pet.UniqueId);
                    p.WriteInt(pet.ItemId); // petid
                    p.WriteMapleString(pet.PetInfo.Name);
                    p.WriteByte(pet.PetInfo.Level); // pet level
                    p.WriteShort(pet.PetInfo.Closeness); // pet closeness
                    p.WriteByte(pet.PetInfo.Fullness); // pet fullness
                    p.WriteShort(0); // ??
                    IMapleItem result;
                    p.WriteInt(chr.Inventorys[MapleInventoryType.Equipped.Value].Inventory.TryGetValue(141,out result)
                        ? result.ItemId
                        : 0);
                }
                p.WriteByte(0);
                //if (chr.getMount() != null && chr.getInventory(MapleInventoryType.EQUIPPED).getItem((byte)-18) != null)
                //{
                //    if (chr.getInventory(MapleInventoryType.EQUIPPED).getItem((byte)-18).getItemId() == chr.getMount().getItemId())
                //    {
                //        if (chr.getInventory(MapleInventoryType.EQUIPPED).getItem((byte)-19) != null)
                //        { // saddle
                //            mplew.WriteByte(chr.getMount().getId()); //mount
                //            mplew.WriteInt(chr.getMount().getLevel()); //level
                //            mplew.WriteInt(chr.getMount().getExp()); //exp
                //            mplew.WriteInt(chr.getMount().getTiredness()); //tiredness
                //        }
                //    }
                //}
                //else
                //{
                    p.WriteByte(0);
                //}
                //try
                //{
                //    Connection con = DatabaseConnection.getConnection();
                //    PreparedStatement ps = con.prepareStatement("SELECT * FROM wishlist WHERE charid = ?");
                //    ps.setInt(1, chr.getId());
                //    ResultSet rs = ps.executeQuery();
                //    int i = 0;
                //    while (rs.next())
                //    {
                //        i++;
                //    }
                p.WriteByte(0);
                //    rs.close();
                //    ps.close();
                //}
                //catch (SQLException e)
                //{
                //    log.info("Error getting wishlist data:", e);
                //}
                //try
                //{
                //    Connection con = DatabaseConnection.getConnection();
                //    PreparedStatement ps = con.prepareStatement("SELECT * FROM wishlist WHERE charid = ? ORDER BY sn DESC");
                //    ps.setInt(1, chr.getId());
                //    ResultSet rs = ps.executeQuery();
                //    while (rs.next())
                //    {
                //        mplew.WriteInt(rs.getInt("sn"));
                //    }
                //    rs.close();
                //    ps.close();
                //}
                //catch (SQLException e)
                //{
                //    log.info("Error getting wishlist data:", e);
                //}
                p.WriteInt(0); //mplew.WriteInt(chr.getMonsterBook().getBookLevel());
                p.WriteInt(0); //mplew.WriteInt(chr.getMonsterBook().getNormalCard());
                p.WriteInt(0); //mplew.WriteInt(chr.getMonsterBook().getSpecialCard());
                p.WriteInt(0); //mplew.WriteInt(chr.getMonsterBook().getTotalCards());
                p.WriteInt(0); //chr.getMonsterBookCover() > 0 ? MapleItemInformationProvider.getInstance().getCardMobId(chr.getMonsterBookCover()) : 0
                p.WriteInt(0);
                p.WriteShort(0);
                MapleInventory iv = chr.Inventorys[MapleInventoryType.Setup.Value];
                var chairItems = iv.Inventory.Values.Where(item => (item.ItemId >= 3010000) && (item.ItemId <= 3020001)).Cast<Item>().ToList();
                p.WriteInt(chairItems.Count);
                foreach (var item in chairItems)
                {
                    p.WriteInt(item.ItemId);
                }
                p.WriteInt(0);
                return p;
            }
        }

        public static OutPacket BlockedPortal()
        {
            using (var p = new OutPacket(SendOpcodes.UpdateStats))
            {
                p.WriteByte(0x01);
                p.WriteInt(0);
                return p;
            }
        }

        #region 任务

        public static OutPacket StartQuest(MapleCharacter c, short quest)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(0x01);
                p.WriteShort(quest);
                p.WriteShort(1);
                p.WriteByte(0x00);
                return p;
            }
        }

        public static OutPacket GetShowQuestCompletion(int id)
        {
            using (var p = new OutPacket(SendOpcodes.ShowQuestCompletion))
            {
                p.WriteShort((short)id);
                return p;
            }
        }

        public static OutPacket ForfeitQuest(MapleCharacter c, short quest)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(0x01);
                p.WriteShort(quest);
                p.WriteShort(0);
                p.WriteByte(0x00);
                p.WriteInt(0);
                p.WriteInt(0);
                return p;
            }
        }

        public static OutPacket CompleteQuest(MapleCharacter c, short quest)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(1);
                p.WriteShort(quest);
                p.WriteByte(2);
                p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                return p;
            }
        }

        public static OutPacket GetChatText(int characterId, string text, bool whiteBg, bool show)
        {
            using (var p = new OutPacket(SendOpcodes.Chattext))
            {
                p.WriteInt(characterId);
                p.WriteBool(whiteBg);
                p.WriteMapleString(text);
                p.WriteBool(show);
                return p;
            }
        }

        public static OutPacket UpdateQuestInfo(MapleCharacter c, short quest, int npc, byte progress)
        {
            // [A5 00] [08] [69 08] [86 71 0F 00] [00 00 00 00]
            // [C5 00] [08] [38 20] [A9 84 8C 00] [00 00] //Ver076
            // [D2 00] [08] [39 20] [A9 84 8C 00] [00 00] //Ver077


            using (var p = new OutPacket(SendOpcodes.UpdateQuestInfo))
            {
                p.WriteByte(progress);
                p.WriteShort(quest);
                p.WriteInt(npc);
                p.WriteInt(0);
                return p;
            }
        }

        public static OutPacket UpdateQuest(int quest, string status)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(1);
                p.WriteShort((short)quest);
                p.WriteByte(1);
                p.WriteMapleString(status);
                return p;
            }
        }

        public static OutPacket UpdateQuestFinish(short quest, int npc, short nextquest)
        {
            using (var p = new OutPacket(SendOpcodes.UpdateQuestInfo))
            {
                p.WriteByte(8);
                p.WriteShort(quest);
                p.WriteInt(npc);
                p.WriteShort(nextquest);
                p.WriteShort(0);
                return p;
            }
        }

        #endregion

        #region 服务器消息

        //* 0: [Notice]
        //* 1: Popup
        //* 2: Megaphone
        //* 3: Super Megaphone
        //* 4: Scrolling message at top
        //* 5: Pink Text
        //* 6: Lightblue Text
        //* B: 心脏
        //* C: 白骨

        public enum ServerMessageType : byte
        {
            Notice = 0x00,
            //消息框
            Popup = 0x01,
            //喇叭
            Megaphone = 0x02,
            //全频道喇叭
            SuperMegaphoen = 0x03,
            TopScrollingMessage = 0x04,
            PinkText = 0x05,
            LightBlueText = 0x06,
            Heart = 0x0B,
            Bones = 0x0C
        }

        public static OutPacket ServerMessage(string message)
        {
            return ServerMessage(ServerMessageType.TopScrollingMessage, 0, message, true, false);
        }

        public static OutPacket ServerNotice(ServerMessageType type, string message)
        {
            return ServerMessage(type, 0, message, false, false);
        }

        public static OutPacket ServerNotice(ServerMessageType type, int channelId, string message)
        {
            return ServerMessage(type, channelId, message, false, false);
        }

        public static OutPacket ServerNotice(ServerMessageType type, int channelId, string message, bool smegaEar)
        {
            return ServerMessage(type, channelId, message, false, smegaEar);
        }

        private static OutPacket ServerMessage(ServerMessageType type, int channelId, string message, bool servermessage,
            bool megaEar)
        {
            using (var p = new OutPacket(SendOpcodes.Servermessage))
            {
                p.WriteByte((byte)type);

                if (servermessage)
                    p.WriteBool(true);

                p.WriteMapleString(message);

                if (type == ServerMessageType.SuperMegaphoen || type == ServerMessageType.Heart ||
                    type == ServerMessageType.Bones)
                {
                    p.WriteByte((byte)channelId); // channel
                    p.WriteBool(megaEar);
                }
                if (type == ServerMessageType.LightBlueText)
                {
                    p.WriteInt(0);
                }

                return p;
            }
        }

        #endregion

        #region 改变角色状态

        public static OutPacket EnableActions()
        {
            return UpdatePlayerStats(EmptyStatupdate, true);
        }

        public static OutPacket UpdatePlayerStats(List<Tuple<MapleStat, int>> stats)
        {
            return UpdatePlayerStats(stats, false);
        }

        public static OutPacket UpdatePlayerStats(List<Tuple<MapleStat, int>> stats, bool itemReaction)
        {
            using (var p = new OutPacket(SendOpcodes.UpdateStats))
            {
                p.WriteBool(itemReaction);

                var updateMask = 0;
                foreach (var statupdate in stats)
                {
                    updateMask |= (int)statupdate.Item1;
                }

                var mystats = stats;
                if (mystats.Count > 1)
                {
                    mystats.Sort((obj1, obj2) =>
                    {
                        var val1 = (int)obj1.Item1;
                        var val2 = (int)obj2.Item1;
                        return val1 < val2 ? -1 : (val1 == val2 ? 0 : 1);
                    });
                }

                p.WriteInt(updateMask);
                foreach (var statupdate in mystats)
                {
                    var valueleft = (int)statupdate.Item1;
                    var valueright = (short)statupdate.Item2;

                    if (valueleft >= 1)
                    {
                        if (valueleft == 0x1)
                        {
                            p.WriteShort(valueright);
                        }
                        else if (valueleft <= 0x4)
                        {
                            p.WriteInt(statupdate.Item2);
                        }
                        else if (valueleft < 0x80)
                        {
                            p.WriteByte((byte)valueright);
                        }
                        else if (valueleft < 0x40000)
                        {
                            p.WriteShort(valueright);
                        }
                        else
                        {
                            p.WriteInt(statupdate.Item2);
                        }
                    }
                }

                return p;
            }
        }

        #endregion

        #region 地图相关

        public static OutPacket PartyPortal(int townId, int targetId, Point position)
        {
            using (var p = new OutPacket(SendOpcodes.PartyOperation))
            {
                p.WriteShort(0x23);
                p.WriteInt(townId);
                p.WriteInt(targetId);
                p.WriteShort((short)position.X);
                p.WriteShort((short)position.Y);

                return p;
            }
        }

        public static OutPacket SpawnPortal(int townId, int targetId, Point pos)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnPortal))
            {
                p.WriteInt(townId);
                p.WriteInt(targetId);
                if (pos != null)
                {
                    p.WriteShort((short)pos.X);
                    p.WriteShort((short)pos.Y);
                }

                return p;
            }
        }

        public static OutPacket SpawnDoor(int oid, Point pos, bool town)
        {
            // [D3 00] [01] [93 AC 00 00] [6B 05] [37 03]
            using (var p = new OutPacket(SendOpcodes.SpawnDoor))
            {
                p.WriteBool(town);
                p.WriteInt(oid);
                p.WriteShort((short)pos.X);
                p.WriteShort((short)pos.Y);
                return p;
            }
        }

        public static OutPacket RemoveDoor(int oid, bool town)
        {
            using (var p = new OutPacket(SendOpcodes.RemoveDoor))
            {
                if (town)
                {
                    p.WriteInt(999999999);
                    p.WriteInt(999999999);
                }
                else
                {
                    p.WriteByte(0);
                    p.WriteInt(oid);
                }

                return p;
            }
        }

        public static OutPacket SpawnPlayerMapobject(MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnPlayer))
            {
                p.WriteInt(chr.Id);
                p.WriteByte(0x00);
                p.WriteMapleString(chr.Name);
                //if (chr.getGuildId() <= 0)
                //{
                p.WriteMapleString("");
                p.WriteBytes(new byte[6]);
                //}
                //else {
                //    MapleGuildSummary gs = chr.getClient().getChannelServer().getGuildSummary(chr.getGuildId());
                //    if (gs != null)
                //    {
                //        mplew.WriteMapleAsciiString(gs.getName());
                //        mplew.WriteShort(gs.getLogoBG());
                //        mplew.WriteByte(gs.getLogoBGColor());
                //        mplew.WriteShort(gs.getLogo());
                //        mplew.WriteByte(gs.getLogoColor());
                //    }
                //    else {
                //        mplew.WriteMapleAsciiString("");
                //        mplew.WriteBytes(new byte[6]);
                //    }
                //}
                p.WriteInt(0);
                p.WriteByte(0x00);
                p.WriteByte(0xE0);
                p.WriteByte(0x1F);
                p.WriteByte(0);
                p.WriteByte((byte)(chr.GetBuffedValue(MapleBuffStat.Morph) != null ? 0x02 : 0x00));
                p.WriteBytes(new byte[3]);

                long buffmask = 0;
                int? buffvalue = null;
                if (chr.GetBuffedValue(MapleBuffStat.Darksight) != null && !chr.IsHidden)
                {
                    buffmask |= (long)MapleBuffStat.Darksight;
                }
                if (chr.GetBuffedValue(MapleBuffStat.Combo) != null)
                {
                    buffmask |= (long)MapleBuffStat.Combo;
                    buffvalue = chr.GetBuffedValue(MapleBuffStat.Combo).Value;
                }
                if (chr.GetBuffedValue(MapleBuffStat.Shadowpartner) != null)
                {
                    buffmask |= (long)MapleBuffStat.Shadowpartner;
                }
                if (chr.GetBuffedValue(MapleBuffStat.Soularrow) != null)
                {
                    buffmask |= (long)MapleBuffStat.Soularrow;
                }
                if (chr.GetBuffedValue(MapleBuffStat.Morph) != null)
                {
                    buffvalue = chr.GetBuffedValue(MapleBuffStat.Morph).Value;
                }
                p.WriteInt((int)((buffmask >> 32) & 0xFFFFFFFFL));
                if (buffvalue != null)
                {
                    if (chr.GetBuffedValue(MapleBuffStat.Morph) != null)
                    {
                        p.WriteShort((short)buffvalue);
                    }
                    else
                    {
                        p.WriteByte((byte)buffvalue);
                    }
                }
                p.WriteInt((int)(buffmask & 0xFFFFFFFFL));
                p.WriteBytes(new byte[6]);
                var charMagicSpawn = Randomizer.Next();
                p.WriteInt(charMagicSpawn); //1
                p.WriteLong(0);
                p.WriteShort(0);
                p.WriteByte(0x00);
                p.WriteInt(charMagicSpawn); //2
                p.WriteLong(0);
                p.WriteShort(0);
                p.WriteByte(0x00);
                p.WriteInt(charMagicSpawn); //3
                p.WriteShort(0);
                p.WriteByte(0x00);

                IMapleItem mount;
                if (chr.GetBuffedValue(MapleBuffStat.MonsterRiding) != null &&
                    chr.Inventorys[MapleInventoryType.Equipped.Value].Inventory.TryGetValue(18, out mount))
                {
                    p.WriteInt(mount.ItemId);
                    p.WriteInt(1004);
                    p.WriteInt(0x01261F00);
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteInt(charMagicSpawn); //4
                    p.WriteLong(0);
                    p.WriteByte(0x00);
                }
                p.WriteLong(0);
                p.WriteInt(charMagicSpawn); //5
                p.WriteByte(0x00);
                p.WriteByte(0x01);
                p.WriteByte(0x41);
                p.WriteByte(0x9A);
                p.WriteByte(0x70);
                p.WriteByte(7);
                p.WriteLong(0);
                p.WriteShort(0);
                p.WriteInt(charMagicSpawn); //6
                p.WriteLong(0);
                p.WriteInt(0);
                p.WriteByte(0x00);
                p.WriteInt(charMagicSpawn); //7
                p.WriteLong(0);
                p.WriteShort(0);
                p.WriteByte(0x00);
                p.WriteInt(charMagicSpawn); //8
                p.WriteByte(0x00);
                p.WriteShort(chr.Job.JobId);

                LoginPacket.AddCharLook(p, chr, false);
                p.WriteInt(chr.Inventorys[MapleInventoryType.Cash.Value].CountById(5110000));
                p.WriteInt(chr.ItemEffect);
                p.WriteInt(0);
                p.WriteInt(-1);
                p.WriteInt(chr.Chair);
                p.WriteShort((short)chr.Position.X);
                p.WriteShort((short)chr.Position.Y);
                p.WriteByte((byte)chr.Stance);
                p.WriteByte(0x00);
                p.WriteShort(0);
                p.WriteInt(1);
                p.WriteLong(0);
                p.WriteByte(0x00);
                p.WriteShort(0);
                var iv = chr.Inventorys[MapleInventoryType.Equipped.Value];

                var equippedC = iv.Inventory.Values;
                var equipped = new List<Item>(equippedC.Count);
                foreach (var item in equippedC)
                {
                    equipped.Add((Item)item);
                }
                equipped.Sort();

                var rings = new List<IEquip>();
                foreach (var item in equipped)
                {
                    if (item.ItemId >= 1112800 && item.ItemId <= 1112802 ||
                        item.ItemId >= 1112001 && item.ItemId <= 1112003)
                    {
                        rings.Add(MapleRing.LoadFromDb(item.ItemId, item.Position, item.UniqueId));
                    }
                }
                rings.Sort();

                if (rings.Any())
                {
                    foreach (var ring in rings)
                    {
                        p.WriteByte(0x01);
                        p.WriteInt(1);
                        p.WriteInt(ring.UniqueId);
                        p.WriteInt(0);
                        p.WriteInt(ring.PartnerUniqueId);
                        p.WriteInt(0);
                        p.WriteInt(ring.ItemId);
                    }
                    p.WriteShort(0);
                    p.WriteByte(0x00);
                }
                else
                {
                    p.WriteInt(0);
                }
                return p;
            }
        }

        public static OutPacket ShowForcedEquip()
        {
            using (var p = new OutPacket(SendOpcodes.ForcedMapEquip))
            {
                p.WriteInt(0);
                return p;
            }
        }

        public static OutPacket AddTutorialStats()
        {
            using (var p = new OutPacket(SendOpcodes.EnableTemporaryStats))
            {
                p.WriteInt(3871);
                p.WriteShort(999);
                p.WriteShort(999);
                p.WriteShort(999);
                p.WriteShort(999);
                p.WriteShort(255);
                p.WriteShort(999);
                p.WriteShort(999);
                p.WriteByte(0x78);
                p.WriteByte(0x8C);
                return p;
            }
        }

        public static OutPacket RemoveTutorialStats()
        {
            using (var p = new OutPacket(SendOpcodes.DisableTemporaryStats))
            {
                return p;
            }
        }

        public static OutPacket SpawnTutorialSummon(int type)
        {
            using (var p = new OutPacket(SendOpcodes.TutorialSummon))
            {
                p.WriteByte((byte)type);
                return p;
            }
        }

        public static OutPacket SpawnSpecialMapObject(MapleSummon summon, int skillLevel, bool animated)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnSpecialMapobject))
            {
                p.WriteInt(summon.Owner.Id);
                p.WriteInt(summon.ObjectId); // Supposed to be Object ID, but this works too! <3
                p.WriteInt(summon.SkillId);
                p.WriteByte(114); // test
                p.WriteByte((byte)skillLevel);
                p.WriteShort((short)summon.Position.X);
                p.WriteShort((short)summon.Position.Y);
                p.WriteByte(4); // test
                p.WriteByte(31); // test
                p.WriteByte(0); // test
                p.WriteByte((byte)summon.MovementType);
                // 0 = don't move, 1 = follow (4th mage summons?), 2/4 = only tele follow, 3 = bird follow
                p.WriteByte(1); // 0 and the summon can't attack - but puppets don't attack with 1 either ^.-
                p.WriteBool(!animated);
                return p;
            }
        }

        public static OutPacket GetClock(int time)
        {
            // time in seconds
            using (var p = new OutPacket(SendOpcodes.Clock))
            {
                p.WriteByte(2);
                // clock type. if you send 3 here you have to send another byte (which does not matter at all) before the timestamp
                p.WriteInt(time);
                return p;
            }
        }

        public static OutPacket GetClockTime(int hour, int min, int sec)
        {
            // Current Time
            using (var p = new OutPacket(SendOpcodes.Clock))
            {
                p.WriteByte(1); // Clock-Type
                p.WriteByte((byte)hour);
                p.WriteByte((byte)min);
                p.WriteByte((byte)sec);
                return p;
            }
        }

        public static OutPacket BoatPacket(bool type) => BoatPacket(type ? 1 : 2);

        public static OutPacket BoatPacket(int effect)
        {
            using (var p = new OutPacket(SendOpcodes.BoatEffect))
            {
                p.WriteShort((short)effect);
                //1034: balrog boat comes, 1548: boat comes in ellinia station, 520: boat leaves ellinia station
                return p;
            }
        }

        public static OutPacket RemovePlayerFromMap(int cid)
        {
            using (var p = new OutPacket(SendOpcodes.RemovePlayerFromMap))
            {
                p.WriteInt(cid);
                return p;
            }
        }

        public static OutPacket RemoveSpecialMapObject(MapleSummon summon, bool animated)
        {
            // [86 00] [6A 4D 27 00] 33 1F 00 00 02
            // 92 00 36 1F 00 00 0F 65 85 01 84 02 06 46 28 00 06 81 02 01 D9 00 BD FB D9 00 BD FB 38 04 2F 21 00 00 10 C1 2A 00 06 00 06 01 00 01 BD FB FC 00 BD FB 6A 04 88 1D 00 00 7D 01 AF FB
            using (var p = new OutPacket(SendOpcodes.RemoveSpecialMapobject))
            {
                p.WriteInt(summon.Owner.Id);
                p.WriteInt(summon.ObjectId);
                p.WriteByte((byte)(animated ? 4 : 1)); // ?
                return p;
            }
        }

        public static OutPacket MovePlayer(int cid, List<ILifeMovementFragment> moves)
        {
            using (var p = new OutPacket(SendOpcodes.MovePlayer))
            {
                p.WriteInt(cid);
                p.WriteInt(0);
                SerializeMovementList(p, moves);
                return p;
            }
        }

        private static void SerializeMovementList(OutPacket p, List<ILifeMovementFragment> moves)
        {
            p.WriteByte((byte)moves.Count);
            foreach (var move in moves)
            {
                move.Serialize(p);
            }
        }


        public static OutPacket GetWarpToMap(MapleMap to, byte spawnPoint, MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.WarpToMap))
            {
                p.WriteInt(chr.Client.ChannelId);
                p.WriteByte(0x00);
                p.WriteByte(0x03);
                p.WriteShort(0);
                p.WriteByte(0x00);
                p.WriteInt(to.MapId);
                p.WriteByte(spawnPoint);
                p.WriteShort(chr.Hp);
                //mplew.Write(0); //取消此处可防止出现无可开始任务的错误。但是人物头上一直会有个灯泡！
                p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                return p;
            }
        }

        public static OutPacket GetWarpToMap(int to, byte spawnPoint, MapleCharacter chr)
        {
            using (var p = new OutPacket(SendOpcodes.WarpToMap))
            {
                p.WriteInt(chr.Client.ChannelId);
                p.WriteByte(0x01);
                p.WriteByte(0x02);
                p.WriteShort(0);
                p.WriteInt(to);
                p.WriteByte(spawnPoint);
                p.WriteShort(chr.Hp);
                p.WriteByte(0x00);
                p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                return p;
            }
        }

        public static OutPacket DestroyReactor(MapleReactor reactor)
        {
            var pos = reactor.Position;
            using (var p = new OutPacket(SendOpcodes.ReactorDestroy))
            {
                p.WriteInt(reactor.ObjectId);
                p.WriteByte(reactor.State);
                p.WriteShort((short)pos.X);
                p.WriteShort((short)pos.Y);
                return p;
            }
        }

        public static OutPacket SpawnReactor(MapleReactor reactor)
        {
            var pos = reactor.Position;
            using (var p = new OutPacket(SendOpcodes.ReactorSpawn))
            {
                p.WriteInt(reactor.ObjectId);
                p.WriteInt(reactor.ReactorId);
                p.WriteByte(reactor.State);
                p.WriteShort((short)pos.X);
                p.WriteShort((short)pos.Y);
                p.WriteByte(0x00);
                return p;
            }
        }

        public static OutPacket TriggerReactor(MapleReactor reactor, int stance)
        {
            var pos = reactor.Position;
            using (var p = new OutPacket(SendOpcodes.ReactorHit))
            {
                p.WriteInt(reactor.ObjectId);
                p.WriteByte(reactor.State);
                p.WriteShort((short)pos.X);
                p.WriteShort((short)pos.Y);
                p.WriteShort((short)stance);
                p.WriteByte(0x00);
                p.WriteByte(0x05); // frame delay, set to 5 since there doesn't appear to be a fixed formula for it
                return p;
            }
        }

        public static OutPacket GetChannelChange(IPAddress inetAddr, short port)
        {
            using (var p = new OutPacket(SendOpcodes.ChangeChannel))
            {
                p.WriteByte(0x01);
                p.WriteBytes(inetAddr.GetAddressBytes());
                p.WriteShort(port);
                return p;
            }
        }

        #endregion

        #region NPC

        public static OutPacket RemoveNpc(int objid)
        {
            using (var p = new OutPacket(SendOpcodes.RemoveNpc))
            {
                p.WriteInt(objid);
                return p;
            }
        }

        public static OutPacket SpawnNpc(MapleNpc npc)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnNpc))
            {
                p.WriteInt(npc.ObjectId);
                p.WriteInt(npc.Id);
                p.WriteShort((short)npc.Position.X);
                p.WriteShort((short)npc.Cy);
                p.WriteBool(npc.F != 1);
                p.WriteShort((short)npc.Fh);
                p.WriteShort((short)npc.Rx0);
                p.WriteShort((short)npc.Rx1);
                p.WriteBool(true);
                return p;
            }
        }

        public static OutPacket SpawnNpcRequestController(MapleNpc npc, bool show)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnNpcRequestController))
            {
                p.WriteByte(0x01);
                p.WriteInt(npc.ObjectId);
                p.WriteInt(npc.Id);
                p.WriteShort((short)npc.Position.X);
                p.WriteShort((short)npc.Cy);
                p.WriteBool(npc.F != 1);
                p.WriteShort((short)npc.Fh);
                p.WriteShort((short)npc.Rx0);
                p.WriteShort((short)npc.Rx1);
                p.WriteBool(show);
                return p;
            }
        }


        public enum NpcTalkType
        {
            Next,
            Prve,
            NextPrve,
            Ok,
            YesNo,
            AcceptDecline,
            Simple
        }

        public static OutPacket NpcTalk(NpcTalkType type, int npcId, string content, byte speaker = 0)
        {
            using (var p = new OutPacket(SendOpcodes.NpcTalk))
            {
                p.WriteByte(0x04);
                p.WriteInt(npcId);

                switch (type)
                {
                    case NpcTalkType.YesNo:
                        p.WriteByte(0x01);
                        break;
                    case NpcTalkType.AcceptDecline:
                        p.WriteByte((byte)(speaker == 0 ? 0x0B : 0x0C));
                        break;
                    case NpcTalkType.Simple:
                        p.WriteByte(0x04);
                        break;
                    default:
                        p.WriteByte(0x00);
                        break;
                }

                p.WriteByte(speaker);
                p.WriteMapleString(content);

                switch (type)
                {
                    case NpcTalkType.Next:
                        p.WriteByte(0x00);
                        p.WriteByte(0x01);
                        break;
                    case NpcTalkType.Prve:
                        p.WriteByte(0x01);
                        p.WriteByte(0x00);
                        break;
                    case NpcTalkType.NextPrve:
                        p.WriteByte(0x01);
                        p.WriteByte(0x01);
                        break;
                    case NpcTalkType.Ok:
                        p.WriteByte(0x00);
                        p.WriteByte(0x00);
                        break;
                }

                return p;
            }
        }

        public static OutPacket NpcTalkStyle(int npc, string talk, int[] styles, int card)
        {
            using (var p = new OutPacket(SendOpcodes.NpcTalk))
            {
                p.WriteByte(0x04); // ?
                p.WriteInt(npc);
                p.WriteByte(0x07);
                p.WriteByte(0x00);
                p.WriteMapleString(talk);
                p.WriteByte((byte)styles.Length);
                for (var i = 0; i < styles.Length; i++)
                {
                    p.WriteInt(styles[i]);
                }
                p.WriteInt(card);
                return p;
            }
        }

        public static OutPacket NpcTalkNum(int npc, string talk, int def, int min, int max)
        {
            using (var p = new OutPacket(SendOpcodes.NpcTalk))
            {
                p.WriteByte(0x04); // ?
                p.WriteInt(npc);
                p.WriteByte(0x03);
                p.WriteByte(0x00);
                p.WriteMapleString(talk);
                p.WriteInt(def);
                p.WriteInt(min);
                p.WriteInt(max);
                return p;
            }
        }

        public static OutPacket NpcTalkText(int npc, string talk)
        {
            using (var p = new OutPacket(SendOpcodes.NpcTalk))
            {
                p.WriteByte(0x04); // ?
                p.WriteInt(npc);
                p.WriteByte(0x02);
                p.WriteByte(0x00);
                p.WriteMapleString(talk);
                p.WriteInt(0);
                p.WriteInt(0);
                return p;
            }
        }

        #endregion

        #region 商店 物品

        public static OutPacket GetNpcShop(MapleClient c, int sid, List<MapleShopItem> items)
        {
            var ii = MapleItemInformationProvider.Instance;

            using (var p = new OutPacket(SendOpcodes.OpenNpcShop))
            {
                p.WriteInt(sid);
                p.WriteShort((short)items.Count);
                foreach (var item in items)
                {
                    p.WriteInt(item.ItemId);
                    p.WriteInt(item.Price);
                    if (!ii.IsThrowingStar(item.ItemId) && !ii.IsBullet(item.ItemId))
                    {
                        p.WriteShort(1);
                        p.WriteShort(item.Buyable);
                    }
                    else
                    {
                        p.WriteShort(0);
                        p.WriteInt(0);
                        p.WriteShort((short)(BitConverter.DoubleToInt64Bits(ii.GetPrice(item.ItemId)) >> 48));
                        p.WriteShort(ii.GetSlotMax(c, item.ItemId));
                    }
                }
                return p;
            }
        }

        public static OutPacket transferFromCSToInv(IMapleItem item, byte position)
        {
            //23 01 4D 01 00 01 CA 4A 0F 00 01 A7 C0 62 00 00 00 00 00 00 CD 77 3C AB 25 CA 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 65 69 6E 6E 08 00 00 40 E0 FD 3B 37 4F 01 FF FF FF FF
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x5D);
                p.WriteByte(position);//in csinventory
                AddItemInfo(p, item, true, false, true);
                return p;
            }
        }

        public static OutPacket TransferFromInvToCs(MapleCharacter c, MapleCashShopInventoryItem item)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(0x5F);
                p.WriteInt(item.UniqueId);
                p.WriteInt(0);
                p.WriteInt(c.Account.Id);
                p.WriteInt(0);
                p.WriteInt(item.ItemId);
                p.WriteInt(item.Sn);
                p.WriteShort(item.Quantity);
                p.WriteString(item.Sender);
                p.WriteZero(13 - Encoding.Default.GetByteCount(item.Sender));
                p.WriteLong(item.Expire == null ?DateUtiliy .GetFileTimestamp(FinalTime) : DateUtiliy.GetFileTimestamp(item.Expire.Value.GetTimeMilliseconds()));
                p.WriteLong(0);
                return p;
            }
        }

        /**
         * code (8 = sell, 0 = buy, 0x20 = due to an error the trade did not happen
         * o.o)
         *
         * @param code
         * @return
         */

        public static OutPacket ConfirmShopTransaction(byte code)
        {
            using (var p = new OutPacket(SendOpcodes.ConfirmShopTransaction))
            {
                // mplew.WriteShort(0xE6); // 47 E4
                p.WriteByte(code); // recharge == 8?

                return p;
            }
        }

        /*
         * 19 reference 00 01 00 = new while adding 01 01 00 = add from drop 00 01 01 = update count 00 01 03 = clear slot
         * 01 01 02 = move to empty slot 01 02 03 = move and merge 01 02 01 = move and merge with rest
         */

        public static OutPacket AddInventorySlot(MapleInventoryType type, IMapleItem item)
        {
            return AddInventorySlot(type, item, false);
        }

        public static OutPacket AddInventorySlot(MapleInventoryType type, IMapleItem item, bool fromDrop)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBool(fromDrop);
                p.WriteBytes(new byte[] { 0x01, 0x00 }); // add mode
                p.WriteByte(type.Value); // iv type
                p.WriteByte(item.Position); // slot id
                AddItemInfo(p, item, true, false, false);

                return p;
            }
        }

        public static OutPacket UpdateInventorySlot(MapleInventoryType type, IMapleItem item)
        {
            return UpdateInventorySlot(type, item, false);
        }

        public static OutPacket UpdateInventorySlot(MapleInventoryType type, IMapleItem item, bool fromDrop)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBool(fromDrop);
                p.WriteBytes(new byte[] { 0x01, 0x01 }); // update   // mode
                p.WriteByte(type.Value); // iv type
                p.WriteByte(item.Position); // slot id
                p.WriteByte(0x00);
                p.WriteShort(item.Quantity);
                return p;
            }
        }

        public static OutPacket MoveInventoryItem(MapleInventoryType type,  short src,  short dst, byte equipIndicator)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBytes(new byte[] { 0x01, 0x01, 0x02 });
                p.WriteByte((byte)(type == MapleInventoryType.Equipped ? 0xFF : type.Value));
                p.WriteShort(src);
                p.WriteShort(dst);
                if (equipIndicator != 0xFF)
                {
                    p.WriteByte(equipIndicator);
                }
                return p;
            }
        }

        public static OutPacket MoveAndMergeInventoryItem(MapleInventoryType type, byte src, byte dst, short total)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBytes(new byte[] { 0x01, 0x02, 0x03 });
                p.WriteByte(type.Value);
                p.WriteShort(src);
                p.WriteByte(0x01); // merge mode?
                p.WriteByte(type.Value);
                p.WriteShort(dst);
                p.WriteShort(total);

                return p;
            }
        }

        public static OutPacket MoveAndMergeWithRestInventoryItem(MapleInventoryType type, byte src, byte dst,
            short srcQ, short dstQ)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBytes(new byte[] { 0x01, 0x02, 0x01 });
                p.WriteByte(type.Value);
                p.WriteShort(src);
                p.WriteShort(srcQ);
                p.WriteByte(0x01);
                p.WriteByte(type.Value);
                p.WriteShort(dst);
                p.WriteShort(dstQ);

                return p;
            }
        }

        public static OutPacket ClearInventoryItem(MapleInventoryType type, byte slot, bool fromDrop)
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBool(fromDrop);
                p.WriteBytes(new byte[] { 0x01, 0x03 });
                p.WriteByte(type.Value);
                p.WriteShort(slot);

                return p;
            }
        }

        public static OutPacket ScrolledItem(IMapleItem scroll, IMapleItem item, bool destroyed,bool isScrolledToEquipped)
        {
            // 18 00 01 02 03 02 08 00 03 01 F7 FF 01
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteBool(true); // fromdrop always true
                p.WriteByte((byte)(destroyed ? 2 : 3));
                p.WriteByte((byte)(scroll.Quantity > 0 ? 1 : 3));
                p.WriteByte(MapleInventoryType.Use.Value);
                p.WriteShort(scroll.Position);

                if (scroll.Quantity > 0)
                {
                    p.WriteShort(scroll.Quantity);
                }
                p.WriteByte(0x03);

                if (!destroyed)
                {
                    p.WriteByte(MapleInventoryType.Equip.Value);
                    if (isScrolledToEquipped)
                    {
                        p.WriteByte(item.Position);
                        p.WriteByte(0xFF);
                    }
                    else
                    {
                        p.WriteShort(item.Position);
                    }
                    p.WriteByte(0x00);
                }
                p.WriteByte(MapleInventoryType.Equip.Value);

                if (isScrolledToEquipped)
                {
                    p.WriteByte(item.Position);
                    p.WriteByte(0xFF);
                }
                else
                {
                    p.WriteShort(item.Position);
                }

                if (!destroyed)
                {
                    AddItemInfo(p, item, true, true);
                }
                p.WriteByte(0x01);

                return p;
            }
        }

        public static OutPacket ShowBoughtCashShopQuestItem(byte position, int itemid)
        {
            using (var p = new OutPacket(SendOpcodes.CsOperation))
            {
                p.WriteByte(111);
                p.WriteInt(1);
                p.WriteShort(1);
                p.WriteShort(position);
                p.WriteInt(itemid);

                return p;
            }
        }

        public static OutPacket GetScrollEffect(int chr, ScrollResult scrollSuccess, bool legendarySpirit)
        {
            using (var p = new OutPacket(SendOpcodes.ShowScrollEffect))
            {
                p.WriteInt(chr);
                switch (scrollSuccess)
                {
                    case ScrollResult.Success:
                        p.WriteShort(1);
                        break;
                    case  ScrollResult.Fail:
                        p.WriteShort(0);                      
                        break;
                    case  ScrollResult.Curse:
                        p.WriteByte(0);
                        p.WriteByte(1);
                        break;
                    default:
                        throw new Exception("effect in illegal range");
                }
                p.WriteShort((short)(legendarySpirit ? 1 : 0));
                return p;
            }
        }

        public static void AddItemInfo(OutPacket p, IMapleItem item, bool zeroPosition = false, bool leaveOut = false,bool cs = false)
        {
            if (item.UniqueId > 0)
            {
                if (item.ItemId >= 5000000 && item.ItemId <= 5000100)
                {
                    AddPetItemInfo(p, item, zeroPosition, leaveOut, cs);
                }
                else if ((item.ItemId >= 1112800 && item.ItemId <= 1112802) || (item.ItemId >= 1112001 && item.ItemId <= 1112003))
                {
                    AddRingItemInfo(p, item, zeroPosition, leaveOut, cs);
                }
                else
                {
                    AddCashItemInfo(p, item, zeroPosition, leaveOut, cs);
                }
            }
            else
            {
                AddNormalItemInfo(p, item, zeroPosition, leaveOut, false);
            }
        }

        private static void AddNormalItemInfo(OutPacket p, IMapleItem item, bool zeroPosition, bool leaveOut, bool cs)
        {
            var ii = MapleItemInformationProvider.Instance;
            IEquip equip = null;
            var masking = false;
            var equipped = false;
            if (item.Type == MapleItemType.Equip)
            {
                equip = (IEquip)item;
            }

            var pos = item.Position;
            if (zeroPosition)
            {
                if (!leaveOut)
                {
                    p.WriteByte(0x00);
                }
            }
            else if (pos >= 128 && pos <= 0xFF)
            {
                if (pos < 156)
                {
                    masking = true;
                    p.WriteByte((byte)(156-pos));
                }
                else
                {
                    p.WriteByte((byte)(256 - pos));
                }
                equipped = true;
            }
            else
            {
                p.WriteByte(item.Position);
            }

            p.WriteByte((byte)item.Type);
            p.WriteInt(item.ItemId);
            p.WriteBool((ii.IsCash(item.ItemId) && equipped) || cs);

            if ((ii.IsCash(item.ItemId) && equipped) || cs)
            {
                p.WriteLong(-1);
            }

            p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));

            if (item.Type == MapleItemType.Equip)
            {
                p.WriteByte(equip.UpgradeSlots);
                p.WriteByte(equip.Level);
                p.WriteShort(equip.Str); // str
                p.WriteShort(equip.Dex); // dex
                p.WriteShort(equip.Int); // int
                p.WriteShort(equip.Luk); // luk
                p.WriteShort(equip.Hp); // hp
                p.WriteShort(equip.Mp); // mp
                p.WriteShort(equip.Watk); // watk
                p.WriteShort(equip.Matk); // matk
                p.WriteShort(equip.Wdef); // wdef
                p.WriteShort(equip.Mdef); // mdef
                p.WriteShort(equip.Acc); // accuracy
                p.WriteShort(equip.Avoid); // avoid
                p.WriteShort(equip.Hands); // hands
                p.WriteShort(equip.Speed); // speed
                p.WriteShort(equip.Jump); // jump
                p.WriteMapleString(equip.Owner);
                p.WriteByte(equip.Locked);
                p.WriteShort(equip.Flag); //Item Flags
                if (!masking)
                {
                    p.WriteInt(0);
                    p.WriteByte(0x00);
                    p.WriteShort(equip.Vicious);
                    p.WriteShort(0);
                    p.WriteLong(0);
                    p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));
                }
                else
                {
                    p.WriteBytes(new byte[]
                    {0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x70, 0x3E, 0xBC, 0x5C, 0x4C, 0x07, 0xCA, 0x01});
                }
                p.WriteInt(-1);
            }
            else
            {
                p.WriteShort(item.Quantity);
                p.WriteMapleString(item.Owner);
                p.WriteShort(item.Flag);
                if (ii.IsThrowingStar(item.ItemId) || ii.IsBullet(item.ItemId))
                {
                    p.WriteBytes(new byte[] { 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x34 });
                }
            }
        }

        private static void AddPetItemInfo(OutPacket p, IMapleItem item, bool zeroPosition, bool leaveOut, bool cs)
        {
            var ii = MapleItemInformationProvider.Instance;
            var pos = item.Position;
            if (zeroPosition)
            {
                if (!leaveOut)
                {
                    p.WriteByte(0x00);
                }
            }
            else if (pos >= 128 && pos <= 0xFF)
            {
                if (pos > 156)
                {
                    p.WriteByte((byte)(156 - pos));
                }
                else
                {
                    p.WriteByte((byte)(256 - pos));
                }
            }
            else
            {
                p.WriteByte(item.Position);
            }

            p.WriteByte(0x03);
            p.WriteInt(item.ItemId);
            p.WriteByte(0x01);
            p.WriteInt(item.UniqueId);
            p.WriteInt(0);

            var pet = MaplePet.Load(item.ItemId, item.Position, item.UniqueId);
            p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));
            var petname = pet.PetInfo.Name;
            if (Encoding.Default.GetByteCount(petname) > 13)
            {
                petname = petname.Substring(0, 13);
            }
            p.WriteString(petname);
            for (var i = Encoding.Default.GetByteCount(petname); i < 13; i++)
            {
                p.WriteByte(0x00);
            }
            p.WriteByte(pet.PetInfo.Level);
            p.WriteShort(pet.PetInfo.Closeness);
            p.WriteByte(pet.PetInfo.Fullness);

            p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));
            p.WriteZero(10);
        }

        private static void AddRingItemInfo(OutPacket p, IMapleItem item, bool zeroPosition, bool leaveOut, bool cs)
        {
            var ii = MapleItemInformationProvider.Instance;
            var ring = false;
            IEquip equip = null;
            if (item.Type == MapleItemType.Equip)
            {
                equip = (IEquip)item;
                if (equip.IsRing)
                {
                    ring = true;
                }
            }
            var pos = item.Position;

            if (zeroPosition)
            {
                if (!leaveOut)
                {
                    p.WriteByte(0x00);
                }
            }
            else if (pos >= 128 && pos <= 0xFF)
            {
                if (pos< 156 || pos == 128 || ring)
                {
                    p.WriteByte((byte)(156-pos));
                }
                else
                {
                    p.WriteByte((byte)(256 - pos));
                }
            }
            else
            {
                p.WriteByte(item.Position);
            }

            p.WriteByte((byte)item.Type);
            p.WriteInt(item.ItemId);
            p.WriteByte(0x01);
            p.WriteInt(equip.UniqueId);
            p.WriteInt(0);

            p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));

            p.WriteByte(equip.UpgradeSlots);
            p.WriteByte(equip.Level);
            p.WriteShort(equip.Str); // str
            p.WriteShort(equip.Dex); // dex
            p.WriteShort(equip.Int); // int
            p.WriteShort(equip.Luk); // luk
            p.WriteShort(equip.Hp); // hp
            p.WriteShort(equip.Mp); // mp
            p.WriteShort(equip.Watk); // watk
            p.WriteShort(equip.Matk); // matk
            p.WriteShort(equip.Wdef); // wdef
            p.WriteShort(equip.Mdef); // mdef
            p.WriteShort(equip.Acc); // accuracy
            p.WriteShort(equip.Avoid); // avoid
            p.WriteShort(equip.Hands); // hands
            p.WriteShort(equip.Speed); // speed
            p.WriteShort(equip.Jump); // jump
            p.WriteMapleString(equip.Owner);
            //道具交易次数？
            p.WriteShort(0);
            //道具经验？
            p.WriteShort(0);
            p.WriteByte(equip.Locked);
            p.WriteByte(0x00);
            p.WriteShort(0);
            p.WriteShort(0);
            p.WriteShort(0);
            p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
            p.WriteInt(-1);
        }

        private static void AddCashItemInfo(OutPacket p, IMapleItem item, bool zeroPosition, bool leaveOut, bool cs)
        {
            var ii = MapleItemInformationProvider.Instance;
            IEquip equip = null;
            var masking = false;
            var equipped = false;
            if (item.Type == MapleItemType.Equip)
            {
                equip = (IEquip)item;
            }
            var pos = item.Position;
            if (zeroPosition)
            {
                if (!leaveOut)
                {
                    p.WriteByte(0x00);
                }
            }
            else if (pos >= 128 && pos <= 0xFF)
            {
                if (pos <156)
                {
                    p.WriteByte((byte)(156 - pos));
                    masking = true;
                }
                else
                {
                    p.WriteByte((byte)(256 - pos));
                }
                equipped = true;
            }
            else
            {
                p.WriteByte(item.Position);
            }
            p.WriteByte((byte)item.Type);
            p.WriteInt(item.ItemId);
            p.WriteBool((ii.IsCash(item.ItemId) && equipped) || cs);
            if ((ii.IsCash(item.ItemId) && equipped) || cs)
            {
                p.WriteLong(item.UniqueId);
            }

            p.WriteLong(DateUtiliy.GetFileTimestamp(item.Expiration?.GetTimeMilliseconds() ?? FinalTime));

            if (item.Type == MapleItemType.Equip)
            {
                p.WriteByte(equip.UpgradeSlots);
                p.WriteByte(equip.Level);
                p.WriteShort(equip.Str); // str
                p.WriteShort(equip.Dex); // dex
                p.WriteShort(equip.Int); // int
                p.WriteShort(equip.Luk); // luk
                p.WriteShort(equip.Hp); // hp
                p.WriteShort(equip.Mp); // mp
                p.WriteShort(equip.Watk); // watk
                p.WriteShort(equip.Matk); // matk
                p.WriteShort(equip.Wdef); // wdef
                p.WriteShort(equip.Mdef); // mdef
                p.WriteShort(equip.Acc); // accuracy
                p.WriteShort(equip.Avoid); // avoid
                p.WriteShort(equip.Hands); // hands
                p.WriteShort(equip.Speed); // speed
                p.WriteShort(equip.Jump); // jump
                p.WriteMapleString(equip.Owner);
                //道具交易次数?
                p.WriteShort(0);
                //道具经验?
                p.WriteShort(0);
                // 0 normal; 1 locked
                p.WriteByte(equip.Locked);
                p.WriteByte(0x00);
                if (!masking && !cs)
                {
                    p.WriteLong(0);
                    p.WriteZero(6);
                    p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                }
                else
                {
                    p.WriteZero(6);
                    p.WriteLong(DateUtiliy.GetFileTimestamp(DateTime.Now.GetTimeMilliseconds()));
                }
                p.WriteInt(-1);
            }
            else
            {
                p.WriteShort(item.Quantity);
                p.WriteMapleString(item.Owner);
                p.WriteShort(0); // this seems to end the item entry but only if its not a THROWING STAR :))9 O.O!

                if (ii.IsThrowingStar(item.ItemId) || ii.IsBullet(item.ItemId))
                {
                    p.WriteBytes(new byte[] { 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x34 });
                }
            }
        }

        public static OutPacket GetInventoryFull()
        {
            using (var p = new OutPacket(SendOpcodes.ModifyInventoryItem))
            {
                p.WriteByte(0x01);
                p.WriteByte(0x00);
                return p;
            }
        }

        public static OutPacket GetShowInventoryFull() => GetShowInventoryStatus(0xFF);

        public static OutPacket ShowItemUnavailable() => GetShowInventoryStatus(0xFE);

        public static OutPacket GetShowInventoryStatus(byte mode)
        {
            using (var p = new OutPacket(SendOpcodes.ShowStatusInfo))
            {
                p.WriteByte(0x00);
                p.WriteByte(mode);
                p.WriteInt(0);
                p.WriteInt(0);
                return p;
            }
        }

        #endregion

        #region 怪物

        public static OutPacket KillMonster(int oid, bool animation)
        {
            return KillMonster(oid, (byte)(animation ? 1 : 0));
        }

        /**
         * Gets a packet telling the client that a monster was killed.
         *
         * @param oid The objectID of the killed monster.
         * @param animation 0 = dissapear, 1 = fade out, 2+ = special
         * @return The kill monster packet.
         */

        public static OutPacket KillMonster(int oid, byte animation)
        {
            using (var p = new OutPacket(SendOpcodes.KillMonster))
            {
                p.WriteInt(oid);
                p.WriteByte(animation); // Not a boolean, really an int type
                return p;
            }
        }

        public static OutPacket SpawnFakeMonster(MapleMonster life, int effect)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnMonsterControl))
            {
                p.WriteByte(0x01);
                p.WriteInt(life.ObjectId);
                p.WriteByte(0x01);
                p.WriteInt(life.Id);
                p.WriteByte(0x00);
                p.WriteShort(0);
                p.WriteLong(0);
                p.WriteInt(0);
                p.WriteByte(0x88);
                p.WriteInt(0);
                p.WriteShort(0);
                p.WriteShort((short)life.Position.X);
                p.WriteShort((short)life.Position.Y);
                p.WriteByte((byte)life.Stance);
                p.WriteShort((short)life.StartFh);
                p.WriteShort((short)life.Fh);
                if (effect > 0)
                {
                    p.WriteByte((byte)effect);
                    p.WriteByte(0);
                    p.WriteShort(0);
                }
                p.WriteShort(-2);
                p.WriteInt(0);

                return p;
            }
        }

        public static OutPacket SpawnMonster(MapleMonster life, bool newSpawn)
        {
            return SpawnMonsterInternal(life, false, newSpawn, false, 0, false);
        }

        public static OutPacket SpawnMonster(MapleMonster life, bool newSpawn, byte effect)
        {
            return SpawnMonsterInternal(life, false, newSpawn, false, effect, false);
        }

        public static OutPacket ControlMonster(MapleMonster life, bool newSpawn, bool aggro)
        {
            return SpawnMonsterInternal(life, true, newSpawn, aggro, 0, false);
        }

        public static OutPacket StopControllingMonster(int oid)
        {
            using (var p = new OutPacket(SendOpcodes.SpawnMonsterControl))
            {
                p.WriteByte(0x00);
                p.WriteInt(oid);
                return p;
            }
        }


        private static OutPacket SpawnMonsterInternal(MapleMonster life, bool requestController, bool newSpawn,
            bool aggro, byte effect, bool makeInvis)
        {
            if (makeInvis)
            {
                using (var p = new OutPacket(SendOpcodes.SpawnMonsterControl))
                {
                    p.WriteByte(0x00);
                    p.WriteInt(life.ObjectId);
                    return p;
                }
            }

            using (var p = new OutPacket(requestController ? SendOpcodes.SpawnMonsterControl : SendOpcodes.SpawnMonster)
                )
            {
                if (requestController)
                {
                    p.WriteByte((byte)(aggro ? 0x02 : 0x01));
                }


                p.WriteInt(life.ObjectId);
                p.WriteByte(0x01); // ????!? either 5 or 1?
                p.WriteInt(life.Id);
                p.WriteByte(0x00);
                p.WriteShort(0);
                p.WriteLong(0);
                p.WriteInt(0);
                p.WriteByte(0x88);
                p.WriteInt(0);
                p.WriteShort(0);
                p.WriteShort((short)life.Position.X);
                p.WriteShort((short)life.Position.Y);
                p.WriteByte((byte)life.Stance);
                p.WriteShort(0); // ?
                p.WriteShort((short)life.Fh);
                if (effect > 0)
                {
                    p.WriteByte(effect);
                    p.WriteByte(0x00);
                    p.WriteShort(0);
                    if (effect == 15)
                    {
                        //(Dojo spawn effect)
                        p.WriteByte(0x00);
                    }
                }

                if (newSpawn)
                {
                    p.WriteShort(-2);
                }
                else
                {
                    p.WriteShort(-1);
                }

                p.WriteInt(0);

                return p;
            }
        }

        public static OutPacket ApplyMonsterStatus(int oid, Dictionary<MonsterStatus, int> stats, int skill,
            bool monsterSkill, int delay)
        {
            return ApplyMonsterStatus(oid, stats, skill, monsterSkill, delay, null);
        }

        public static OutPacket ApplyMonsterStatus(int oid, Dictionary<MonsterStatus, int> stats, int skill,
            bool monsterSkill, int delay, MobSkill mobskill)
        {
            // 9B 00 67 40 6F 00 80 00 00 00 01 00 FD FE 30 00 08 00 64 00 01
            // 1D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 01 00 79 00 01 00 B4 78 00 00 00 00 84 03
            // B4 00 A8 90 03 00 00 00 04 00 01 00 8C 00 03 00 14 00 4C 04 02
            // D8 00 EF AE F4 00 00 00 01 00 01 00 5D 43 23 00 0E 00 E8 03 02

            using (var p = new OutPacket(SendOpcodes.ApplyMonsterStatus))
            {
                p.WriteInt(oid);
                var mask = 0;
                foreach (var stat in stats.Keys)
                {
                    mask |= (int)stat;
                }
                p.WriteLong(0);
                p.WriteInt(0);
                p.WriteInt(mask);
                foreach (var val in stats.Values)
                {
                    p.WriteShort((short)val);
                    if (monsterSkill)
                    {
                        p.WriteShort(mobskill.SkillId);
                        p.WriteShort(mobskill.SkillLevel);
                    }
                    else
                    {
                        p.WriteInt(skill);
                    }
                    p.WriteShort(0); // as this looks similar to giveBuff this
                    // might actually be the buffTime but it's not displayed anywhere
                }
                p.WriteShort((short)delay); // delay in ms
                p.WriteByte(0x02); // ?

                return p;
            }
        }


        public static OutPacket MoveMonsterResponse(int objectid, short moveid, int currentMp, bool useSkills,
            byte skillId = 0, byte skillLevel = 0)
        {
            // A1 00 18 DC 41 00 01 00 00 1E 00 00 00
            // A1 00 22 22 22 22 01 00 00 00 00 00 00
            // EE 00 D5 C9 38 00 07 00 00 0F 00 00 00
            // F2 00 2E 96 00 00 01 00 00 0F 00 00 00

            using (var p = new OutPacket(SendOpcodes.MoveMonsterResponse))
            {
                p.WriteInt(objectid);
                p.WriteShort(moveid);
                p.WriteBool(useSkills);
                p.WriteShort((short)currentMp);
                p.WriteByte(skillId);
                p.WriteByte(skillLevel);
                return p;
            }
        }

        public static OutPacket MoveMonster(int useskill, int skill, int skill1, int skill2, int skill3, int oid,
            Point startPos, List<ILifeMovementFragment> moves)
        {
            using (var mplew = new OutPacket(SendOpcodes.MoveMonster))
            {
                mplew.WriteInt(oid);
                mplew.WriteByte(0x00);
                mplew.WriteByte((byte)useskill); // 0
                mplew.WriteByte((byte)skill); // -1
                mplew.WriteByte((byte)skill1); // 0
                mplew.WriteByte((byte)skill2); // 0
                mplew.WriteByte((byte)skill3); // 0
                mplew.WriteByte(0); // 0
                mplew.WriteShort((short)startPos.X);
                mplew.WriteShort((short)startPos.Y);
                serializeMovementList(mplew, moves);

                return mplew;
            }
        }

        private static void serializeMovementList(OutPacket p, List<ILifeMovementFragment> moves)
        {
            p.WriteByte((byte)moves.Count);
            foreach (var move in moves)
            {
                move.Serialize(p);
            }
        }

        public static OutPacket ShowMonsterHp(int oid, byte remhppercentage)
        {
            using (var p = new OutPacket(SendOpcodes.ShowMonsterHp))
            {
                p.WriteInt(oid);
                p.WriteByte(remhppercentage);
                return p;
            }
        }

        public static OutPacket ShowBossHp(int oid, int currHp, int maxHp, byte tagColor, byte tagBgColor)
        {
            //53 00 05 21 B3 81 00 46 F2 5E 01 C0 F3 5E 01 04 01
            //00 81 B3 21 = 8500001 = Pap monster ID
            //01 5E F3 C0 = 23,000,000 = Pap max HP
            //04, 01 - boss bar color/background color as provided in WZ 

            using (var p = new OutPacket(SendOpcodes.BossEnv))
            {
                p.WriteByte(0x05);
                p.WriteInt(oid);
                p.WriteInt(currHp);
                p.WriteInt(maxHp);
                p.WriteByte(tagColor);
                p.WriteByte(tagBgColor);
                return p;
            }
        }

        public static OutPacket DamageMonster(int oid, int damage)
        {
            using (var p = new OutPacket(SendOpcodes.DamageMonster))
            {
                p.WriteInt(oid);
                p.WriteByte(0x00);
                p.WriteInt(damage);
                return p;
            }
        }

        public static OutPacket HealMonster(int oid, int heal)
        {
            using (var p = new OutPacket(SendOpcodes.DamageMonster))
            {
                p.WriteInt(oid);
                p.WriteByte(0x00);
                p.WriteInt(-heal);
                return p;
            }
        }

        public static OutPacket CancelMonsterStatus(int oid, Dictionary<MonsterStatus, int> stats)
        {
            // D9 00 EF AE F4 00 00 00 01 00 03 //074
            using (var p = new OutPacket(SendOpcodes.CancelMonsterStatus))
            {
                p.WriteInt(oid);
                var mask = stats.Keys.Aggregate(0, (current, stat) => current | (int)stat);
                p.WriteLong(0);
                p.WriteInt(0);
                p.WriteInt(mask);
                p.WriteByte(0x03);

                return p;
            }
        }

        #endregion
    }
}